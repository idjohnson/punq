definitions:
  dtos.AccessLevel:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - READER
    - USER
    - ADMIN
  dtos.PunqAccess:
    properties:
      level:
        $ref: '#/definitions/dtos.AccessLevel'
      userId:
        type: string
    required:
    - level
    - userId
    type: object
  dtos.PunqContext:
    properties:
      access:
        items:
          $ref: '#/definitions/dtos.PunqAccess'
        type: array
      contextBase64:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - access
    - contextBase64
    - id
    - name
    type: object
  dtos.PunqToken:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  dtos.PunqUser:
    properties:
      accessLevel:
        $ref: '#/definitions/dtos.AccessLevel'
      createdAt:
        type: string
      displayName:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
    required:
    - accessLevel
    - createdAt
    - displayName
    - email
    - id
    - password
    type: object
  dtos.PunqUserCreateInput:
    properties:
      accessLevel:
        $ref: '#/definitions/dtos.AccessLevel'
      displayName:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - accessLevel
    - displayName
    - email
    - password
    type: object
  dtos.PunqUserUpdateInput:
    properties:
      accessLevel:
        $ref: '#/definitions/dtos.AccessLevel'
      displayName:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
    required:
    - accessLevel
    - displayName
    - email
    - id
    - password
    type: object
  intstr.IntOrString:
    properties:
      intVal:
        type: integer
      strVal:
        type: string
      type:
        $ref: '#/definitions/intstr.Type'
    type: object
  intstr.Type:
    enum:
    - 0
    - 1
    type: integer
    x-enum-comments:
      Int: The IntOrString holds an int.
      String: The IntOrString holds a string.
    x-enum-varnames:
    - Int
    - String
  k8s_io_api_core_v1.ConditionStatus:
    enum:
    - "True"
    - "False"
    - Unknown
    type: string
    x-enum-varnames:
    - ConditionTrue
    - ConditionFalse
    - ConditionUnknown
  k8s_io_api_core_v1.LocalObjectReference:
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
    type: object
  k8s_io_api_core_v1.SecretKeySelector:
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret
          key.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
    type: object
  k8s_io_apimachinery_pkg_apis_meta_v1.ConditionStatus:
    enum:
    - "True"
    - "False"
    - Unknown
    type: string
    x-enum-varnames:
    - ConditionTrue
    - ConditionFalse
    - ConditionUnknown
  kubernetes.K8sNewWorkload:
    properties:
      description:
        type: string
      name:
        type: string
      yamlString:
        type: string
    type: object
  operator.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  resource.Quantity:
    properties:
      Format:
        enum:
        - DecimalExponent
        - BinarySI
        - DecimalSI
        type: string
        x-enum-comments:
          BinarySI: e.g., 12Mi (12 * 2^20)
          DecimalExponent: e.g., 12e6
          DecimalSI: e.g., 12M  (12 * 10^6)
        x-enum-varnames:
        - DecimalExponent
        - BinarySI
        - DecimalSI
    type: object
  structs.Version:
    properties:
      branch:
        type: string
      buildTimestamp:
        type: string
      gitCommitHash:
        type: string
      name:
        type: string
      version:
        type: string
    type: object
  utils.K8sWorkloadResult:
    properties:
      error: {}
      result: {}
    type: object
  v1.AWSElasticBlockStoreVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is the filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      partition:
        description: |-
          partition is the partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          +optional
        type: integer
      readOnly:
        description: |-
          readOnly value true will force the readOnly setting in VolumeMounts.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
        type: boolean
      volumeID:
        description: |-
          volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: string
    type: object
  v1.Affinity:
    properties:
      nodeAffinity:
        allOf:
        - $ref: '#/definitions/v1.NodeAffinity'
        description: |-
          Describes node affinity scheduling rules for the pod.
          +optional
      podAffinity:
        allOf:
        - $ref: '#/definitions/v1.PodAffinity'
        description: |-
          Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
          +optional
      podAntiAffinity:
        allOf:
        - $ref: '#/definitions/v1.PodAntiAffinity'
        description: |-
          Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
          +optional
    type: object
  v1.AzureDataDiskCachingMode:
    enum:
    - None
    - ReadOnly
    - ReadWrite
    type: string
    x-enum-varnames:
    - AzureDataDiskCachingNone
    - AzureDataDiskCachingReadOnly
    - AzureDataDiskCachingReadWrite
  v1.AzureDataDiskKind:
    enum:
    - Shared
    - Dedicated
    - Managed
    type: string
    x-enum-varnames:
    - AzureSharedBlobDisk
    - AzureDedicatedBlobDisk
    - AzureManagedDisk
  v1.AzureDiskVolumeSource:
    properties:
      cachingMode:
        allOf:
        - $ref: '#/definitions/v1.AzureDataDiskCachingMode'
        description: |-
          cachingMode is the Host Caching mode: None, Read Only, Read Write.
          +optional
      diskName:
        description: diskName is the Name of the data disk in the blob storage
        type: string
      diskURI:
        description: diskURI is the URI of data disk in the blob storage
        type: string
      fsType:
        description: |-
          fsType is Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/v1.AzureDataDiskKind'
        description: 'kind expected values are Shared: multiple blob disks per storage
          account  Dedicated: single blob disk per storage account  Managed: azure
          managed data disk (only in managed availability set). defaults to shared'
      readOnly:
        description: |-
          readOnly Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
    type: object
  v1.AzureFileVolumeSource:
    properties:
      readOnly:
        description: |-
          readOnly defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretName:
        description: secretName is the  name of secret that contains Azure Storage
          Account Name and Key
        type: string
      shareName:
        description: shareName is the azure share Name
        type: string
    type: object
  v1.CSIVolumeSource:
    properties:
      driver:
        description: |-
          driver is the name of the CSI driver that handles this volume.
          Consult with your admin for the correct name as registered in the cluster.
        type: string
      fsType:
        description: |-
          fsType to mount. Ex. "ext4", "xfs", "ntfs".
          If not provided, the empty value is passed to the associated CSI driver
          which will determine the default filesystem to apply.
          +optional
        type: string
      nodePublishSecretRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        description: |-
          nodePublishSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI
          NodePublishVolume and NodeUnpublishVolume calls.
          This field is optional, and  may be empty if no secret is required. If the
          secret object contains more than one secret, all secret references are passed.
          +optional
      readOnly:
        description: |-
          readOnly specifies a read-only configuration for the volume.
          Defaults to false (read/write).
          +optional
        type: boolean
      volumeAttributes:
        additionalProperties:
          type: string
        description: |-
          volumeAttributes stores driver-specific properties that are passed to the CSI
          driver. Consult your driver's documentation for supported values.
          +optional
        type: object
    type: object
  v1.Capabilities:
    properties:
      add:
        description: |-
          Added capabilities
          +optional
        items:
          type: string
        type: array
      drop:
        description: |-
          Removed capabilities
          +optional
        items:
          type: string
        type: array
    type: object
  v1.CephFSVolumeSource:
    properties:
      monitors:
        description: |-
          monitors is Required: Monitors is a collection of Ceph monitors
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        items:
          type: string
        type: array
      path:
        description: |-
          path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
          +optional
        type: string
      readOnly:
        description: |-
          readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: boolean
      secretFile:
        description: |-
          secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
      secretRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        description: |-
          secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
      user:
        description: |-
          user is optional: User is the rados user name, default is admin
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
    type: object
  v1.CinderVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
        type: string
      readOnly:
        description: |-
          readOnly defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
        type: boolean
      secretRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        description: |-
          secretRef is optional: points to a secret object containing parameters used to connect
          to OpenStack.
          +optional
      volumeID:
        description: |-
          volumeID used to identify the volume in cinder.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        type: string
    type: object
  v1.ClaimSource:
    properties:
      resourceClaimName:
        description: |-
          ResourceClaimName is the name of a ResourceClaim object in the same
          namespace as this pod.
        type: string
      resourceClaimTemplateName:
        description: |-
          ResourceClaimTemplateName is the name of a ResourceClaimTemplate
          object in the same namespace as this pod.

          The template will be used to create a new ResourceClaim, which will
          be bound to this pod. When this pod is deleted, the ResourceClaim
          will also be deleted. The pod name and resource name, along with a
          generated component, will be used to form a unique name for the
          ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.

          This field is immutable and no changes will be made to the
          corresponding ResourceClaim by the control plane after creating the
          ResourceClaim.
        type: string
    type: object
  v1.ClientIPConfig:
    properties:
      timeoutSeconds:
        description: |-
          timeoutSeconds specifies the seconds of ClientIP type session sticky time.
          The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
          Default value is 10800(for 3 hours).
          +optional
        type: integer
    type: object
  v1.Condition:
    properties:
      lastTransitionTime:
        description: |-
          lastTransitionTime is the last time the condition transitioned from one status to another.
          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
          +required
          +kubebuilder:validation:Required
          +kubebuilder:validation:Type=string
          +kubebuilder:validation:Format=date-time
        type: string
      message:
        description: |-
          message is a human readable message indicating details about the transition.
          This may be an empty string.
          +required
          +kubebuilder:validation:Required
          +kubebuilder:validation:MaxLength=32768
        type: string
      observedGeneration:
        description: |-
          observedGeneration represents the .metadata.generation that the condition was set based upon.
          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
          with respect to the current state of the instance.
          +optional
          +kubebuilder:validation:Minimum=0
        type: integer
      reason:
        description: |-
          reason contains a programmatic identifier indicating the reason for the condition's last transition.
          Producers of specific condition types may define expected values and meanings for this field,
          and whether the values are considered a guaranteed API.
          The value should be a CamelCase string.
          This field may not be empty.
          +required
          +kubebuilder:validation:Required
          +kubebuilder:validation:MaxLength=1024
          +kubebuilder:validation:MinLength=1
          +kubebuilder:validation:Pattern=`^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$`
        type: string
      status:
        allOf:
        - $ref: '#/definitions/k8s_io_apimachinery_pkg_apis_meta_v1.ConditionStatus'
        description: |-
          status of the condition, one of True, False, Unknown.
          +required
          +kubebuilder:validation:Required
          +kubebuilder:validation:Enum=True;False;Unknown
      type:
        description: |-
          type of condition in CamelCase or in foo.example.com/CamelCase.
          ---
          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
          useful (see .node.status.conditions), the ability to deconflict is important.
          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
          +required
          +kubebuilder:validation:Required
          +kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`
          +kubebuilder:validation:MaxLength=316
        type: string
    type: object
  v1.ConfigMap:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      binaryData:
        additionalProperties:
          items:
            type: integer
          type: array
        description: |-
          BinaryData contains the binary data.
          Each key must consist of alphanumeric characters, '-', '_' or '.'.
          BinaryData can contain byte sequences that are not in the UTF-8 range.
          The keys stored in BinaryData must not overlap with the ones in
          the Data field, this is enforced during validation process.
          Using this field will require 1.10+ apiserver and
          kubelet.
          +optional
        type: object
      data:
        additionalProperties:
          type: string
        description: |-
          Data contains the configuration data.
          Each key must consist of alphanumeric characters, '-', '_' or '.'.
          Values with non-UTF-8 byte sequences must use the BinaryData field.
          The keys stored in Data must not overlap with the keys in
          the BinaryData field, this is enforced during validation process.
          +optional
        type: object
      immutable:
        description: |-
          Immutable, if set to true, ensures that data stored in the ConfigMap cannot
          be updated (only object metadata can be modified).
          If not set to true, the field can be modified at any time.
          Defaulted to nil.
          +optional
        type: boolean
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
    type: object
  v1.ConfigMapEnvSource:
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap must be defined
          +optional
        type: boolean
    type: object
  v1.ConfigMapKeySelector:
    properties:
      key:
        description: The key to select.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its key must be defined
          +optional
        type: boolean
    type: object
  v1.ConfigMapProjection:
    properties:
      items:
        description: |-
          items if unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/v1.KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          optional specify whether the ConfigMap or its keys must be defined
          +optional
        type: boolean
    type: object
  v1.ConfigMapVolumeSource:
    properties:
      defaultMode:
        description: |-
          defaultMode is optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      items:
        description: |-
          items if unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/v1.KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          optional specify whether the ConfigMap or its keys must be defined
          +optional
        type: boolean
    type: object
  v1.Container:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The container image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The container image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/v1.EnvFromSource'
        type: array
      image:
        description: |-
          Container image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
      imagePullPolicy:
        allOf:
        - $ref: '#/definitions/v1.PullPolicy'
        description: |-
          Image pull policy.
          One of Always, Never, IfNotPresent.
          Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
          +optional
      lifecycle:
        allOf:
        - $ref: '#/definitions/v1.Lifecycle'
        description: |-
          Actions that the management system should take in response to container lifecycle events.
          Cannot be updated.
          +optional
      livenessProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          Periodic probe of container liveness.
          Container will be restarted if the probe fails.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
      ports:
        description: |-
          List of ports to expose from the container. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Modifying this array with strategic merge patch may corrupt the data.
          For more information See https://github.com/kubernetes/kubernetes/issues/108255.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/v1.ContainerPort'
        type: array
      readinessProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          Periodic probe of container service readiness.
          Container will be removed from service endpoints if the probe fails.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      resizePolicy:
        description: |-
          Resources resize policy for the container.
          +featureGate=InPlacePodVerticalScaling
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.ContainerResizePolicy'
        type: array
      resources:
        allOf:
        - $ref: '#/definitions/v1.ResourceRequirements'
        description: |-
          Compute Resources required by this container.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      restartPolicy:
        allOf:
        - $ref: '#/definitions/v1.ContainerRestartPolicy'
        description: |-
          RestartPolicy defines the restart behavior of individual containers in a pod.
          This field may only be set for init containers, and the only allowed value is "Always".
          For non-init containers or when this field is not specified,
          the restart behavior is defined by the Pod's restart policy and the container type.
          Setting the RestartPolicy as "Always" for the init container will have the following effect:
          this init container will be continually restarted on
          exit until all regular containers have terminated. Once all regular
          containers have completed, all init containers with restartPolicy "Always"
          will be shut down. This lifecycle differs from normal init containers and
          is often referred to as a "sidecar" container. Although this init
          container still starts in the init container sequence, it does not wait
          for the container to complete before proceeding to the next init
          container. Instead, the next init container starts immediately after this
          init container is started, or after any startupProbe has successfully
          completed.
          +featureGate=SidecarContainers
          +optional
      securityContext:
        allOf:
        - $ref: '#/definitions/v1.SecurityContext'
        description: |-
          SecurityContext defines the security options the container should be run with.
          If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
          +optional
      startupProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          StartupProbe indicates that the Pod has successfully initialized.
          If specified, no other probes are executed until this completes successfully.
          If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
          This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
          when it might take a long time to load data or warm a cache, than during steady-state operation.
          This cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        allOf:
        - $ref: '#/definitions/v1.TerminationMessagePolicy'
        description: |-
          Indicate how the termination message should be populated. File will use the contents of
          terminationMessagePath to populate the container status message on both success and failure.
          FallbackToLogsOnError will use the last chunk of container log output if the termination
          message file is empty and the container exited with an error.
          The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          Defaults to File.
          Cannot be updated.
          +optional
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/v1.VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    type: object
  v1.ContainerPort:
    properties:
      containerPort:
        description: |-
          Number of port to expose on the pod's IP address.
          This must be a valid port number, 0 < x < 65536.
        type: integer
      hostIP:
        description: |-
          What host IP to bind the external port to.
          +optional
        type: string
      hostPort:
        description: |-
          Number of port to expose on the host.
          If specified, this must be a valid port number, 0 < x < 65536.
          If HostNetwork is specified, this must match ContainerPort.
          Most containers do not need this.
          +optional
        type: integer
      name:
        description: |-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
          +optional
        type: string
      protocol:
        allOf:
        - $ref: '#/definitions/v1.Protocol'
        description: |-
          Protocol for port. Must be UDP, TCP, or SCTP.
          Defaults to "TCP".
          +optional
          +default="TCP"
    type: object
  v1.ContainerResizePolicy:
    properties:
      resourceName:
        allOf:
        - $ref: '#/definitions/v1.ResourceName'
        description: |-
          Name of the resource to which this resource resize policy applies.
          Supported values: cpu, memory.
      restartPolicy:
        allOf:
        - $ref: '#/definitions/v1.ResourceResizeRestartPolicy'
        description: |-
          Restart policy to apply when specified resource is resized.
          If not specified, it defaults to NotRequired.
    type: object
  v1.ContainerRestartPolicy:
    enum:
    - Always
    type: string
    x-enum-varnames:
    - ContainerRestartPolicyAlways
  v1.ContainerState:
    properties:
      running:
        allOf:
        - $ref: '#/definitions/v1.ContainerStateRunning'
        description: |-
          Details about a running container
          +optional
      terminated:
        allOf:
        - $ref: '#/definitions/v1.ContainerStateTerminated'
        description: |-
          Details about a terminated container
          +optional
      waiting:
        allOf:
        - $ref: '#/definitions/v1.ContainerStateWaiting'
        description: |-
          Details about a waiting container
          +optional
    type: object
  v1.ContainerStateRunning:
    properties:
      startedAt:
        description: |-
          Time at which the container was last (re-)started
          +optional
        type: string
    type: object
  v1.ContainerStateTerminated:
    properties:
      containerID:
        description: |-
          Container's ID in the format '<type>://<container_id>'
          +optional
        type: string
      exitCode:
        description: Exit status from the last termination of the container
        type: integer
      finishedAt:
        description: |-
          Time at which the container last terminated
          +optional
        type: string
      message:
        description: |-
          Message regarding the last termination of the container
          +optional
        type: string
      reason:
        description: |-
          (brief) reason from the last termination of the container
          +optional
        type: string
      signal:
        description: |-
          Signal from the last termination of the container
          +optional
        type: integer
      startedAt:
        description: |-
          Time at which previous execution of the container started
          +optional
        type: string
    type: object
  v1.ContainerStateWaiting:
    properties:
      message:
        description: |-
          Message regarding why the container is not yet running.
          +optional
        type: string
      reason:
        description: |-
          (brief) reason the container is not yet running.
          +optional
        type: string
    type: object
  v1.ContainerStatus:
    properties:
      allocatedResources:
        allOf:
        - $ref: '#/definitions/v1.ResourceList'
        description: |-
          AllocatedResources represents the compute resources allocated for this container by the
          node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission
          and after successfully admitting desired pod resize.
          +featureGate=InPlacePodVerticalScaling
          +optional
      containerID:
        description: |-
          ContainerID is the ID of the container in the format '<type>://<container_id>'.
          Where type is a container runtime identifier, returned from Version call of CRI API
          (for example "containerd").
          +optional
        type: string
      image:
        description: |-
          Image is the name of container image that the container is running.
          The container image may not match the image used in the PodSpec,
          as it may have been resolved by the runtime.
          More info: https://kubernetes.io/docs/concepts/containers/images.
        type: string
      imageID:
        description: |-
          ImageID is the image ID of the container's image. The image ID may not
          match the image ID of the image used in the PodSpec, as it may have been
          resolved by the runtime.
        type: string
      lastState:
        allOf:
        - $ref: '#/definitions/v1.ContainerState'
        description: |-
          LastTerminationState holds the last termination state of the container to
          help debug container crashes and restarts. This field is not
          populated if the container is still running and RestartCount is 0.
          +optional
      name:
        description: |-
          Name is a DNS_LABEL representing the unique name of the container.
          Each container in a pod must have a unique name across all container types.
          Cannot be updated.
        type: string
      ready:
        description: |-
          Ready specifies whether the container is currently passing its readiness check.
          The value will change as readiness probes keep executing. If no readiness
          probes are specified, this field defaults to true once the container is
          fully started (see Started field).

          The value is typically used to determine whether a container is ready to
          accept traffic.
        type: boolean
      resources:
        allOf:
        - $ref: '#/definitions/v1.ResourceRequirements'
        description: |-
          Resources represents the compute resource requests and limits that have been successfully
          enacted on the running container after it has been started or has been successfully resized.
          +featureGate=InPlacePodVerticalScaling
          +optional
      restartCount:
        description: |-
          RestartCount holds the number of times the container has been restarted.
          Kubelet makes an effort to always increment the value, but there
          are cases when the state may be lost due to node restarts and then the value
          may be reset to 0. The value is never negative.
        type: integer
      started:
        description: |-
          Started indicates whether the container has finished its postStart lifecycle hook
          and passed its startup probe.
          Initialized as false, becomes true after startupProbe is considered
          successful. Resets to false when the container is restarted, or if kubelet
          loses state temporarily. In both cases, startup probes will run again.
          Is always true when no startupProbe is defined and container is running and
          has passed the postStart lifecycle hook. The null value must be treated the
          same as false.
          +optional
        type: boolean
      state:
        allOf:
        - $ref: '#/definitions/v1.ContainerState'
        description: |-
          State holds details about the container's current condition.
          +optional
    type: object
  v1.DNSPolicy:
    enum:
    - ClusterFirstWithHostNet
    - ClusterFirst
    - Default
    - None
    type: string
    x-enum-varnames:
    - DNSClusterFirstWithHostNet
    - DNSClusterFirst
    - DNSDefault
    - DNSNone
  v1.DaemonSet:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      spec:
        allOf:
        - $ref: '#/definitions/v1.DaemonSetSpec'
        description: |-
          The desired behavior of this daemon set.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
      status:
        allOf:
        - $ref: '#/definitions/v1.DaemonSetStatus'
        description: |-
          The current status of this daemon set. This data may be
          out of date by some window of time.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
    type: object
  v1.DaemonSetCondition:
    properties:
      lastTransitionTime:
        description: |-
          Last time the condition transitioned from one status to another.
          +optional
        type: string
      message:
        description: |-
          A human readable message indicating details about the transition.
          +optional
        type: string
      reason:
        description: |-
          The reason for the condition's last transition.
          +optional
        type: string
      status:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.ConditionStatus'
        description: Status of the condition, one of True, False, Unknown.
      type:
        description: Type of DaemonSet condition.
        type: string
    type: object
  v1.DaemonSetSpec:
    properties:
      minReadySeconds:
        description: |-
          The minimum number of seconds for which a newly created DaemonSet pod should
          be ready without any of its container crashing, for it to be considered
          available. Defaults to 0 (pod will be considered available as soon as it
          is ready).
          +optional
        type: integer
      revisionHistoryLimit:
        description: |-
          The number of old history to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
          Defaults to 10.
          +optional
        type: integer
      selector:
        allOf:
        - $ref: '#/definitions/v1.LabelSelector'
        description: |-
          A label query over pods that are managed by the daemon set.
          Must match in order to be controlled.
          It must match the pod template's labels.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
      template:
        allOf:
        - $ref: '#/definitions/v1.PodTemplateSpec'
        description: |-
          An object that describes the pod that will be created.
          The DaemonSet will create exactly one copy of this pod on every node
          that matches the template's node selector (or on every node if no node
          selector is specified).
          The only allowed template.spec.restartPolicy value is "Always".
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
      updateStrategy:
        allOf:
        - $ref: '#/definitions/v1.DaemonSetUpdateStrategy'
        description: |-
          An update strategy to replace existing DaemonSet pods with new pods.
          +optional
    type: object
  v1.DaemonSetStatus:
    properties:
      collisionCount:
        description: |-
          Count of hash collisions for the DaemonSet. The DaemonSet controller
          uses this field as a collision avoidance mechanism when it needs to
          create the name for the newest ControllerRevision.
          +optional
        type: integer
      conditions:
        description: |-
          Represents the latest available observations of a DaemonSet's current state.
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.DaemonSetCondition'
        type: array
      currentNumberScheduled:
        description: |-
          The number of nodes that are running at least 1
          daemon pod and are supposed to run the daemon pod.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        type: integer
      desiredNumberScheduled:
        description: |-
          The total number of nodes that should be running the daemon
          pod (including nodes correctly running the daemon pod).
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        type: integer
      numberAvailable:
        description: |-
          The number of nodes that should be running the
          daemon pod and have one or more of the daemon pod running and
          available (ready for at least spec.minReadySeconds)
          +optional
        type: integer
      numberMisscheduled:
        description: |-
          The number of nodes that are running the daemon pod, but are
          not supposed to run the daemon pod.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        type: integer
      numberReady:
        description: |-
          numberReady is the number of nodes that should be running the daemon pod and have one
          or more of the daemon pod running with a Ready Condition.
        type: integer
      numberUnavailable:
        description: |-
          The number of nodes that should be running the
          daemon pod and have none of the daemon pod running and available
          (ready for at least spec.minReadySeconds)
          +optional
        type: integer
      observedGeneration:
        description: |-
          The most recent generation observed by the daemon set controller.
          +optional
        type: integer
      updatedNumberScheduled:
        description: |-
          The total number of nodes that are running updated daemon pod
          +optional
        type: integer
    type: object
  v1.DaemonSetUpdateStrategy:
    properties:
      rollingUpdate:
        allOf:
        - $ref: '#/definitions/v1.RollingUpdateDaemonSet'
        description: |-
          Rolling update config params. Present only if type = "RollingUpdate".
          ---
          TODO: Update this to follow our convention for oneOf, whatever we decide it
          to be. Same as Deployment `strategy.rollingUpdate`.
          See https://github.com/kubernetes/kubernetes/issues/35345
          +optional
      type:
        allOf:
        - $ref: '#/definitions/v1.DaemonSetUpdateStrategyType'
        description: |-
          Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
          +optional
    type: object
  v1.DaemonSetUpdateStrategyType:
    enum:
    - RollingUpdate
    - OnDelete
    type: string
    x-enum-varnames:
    - RollingUpdateDaemonSetStrategyType
    - OnDeleteDaemonSetStrategyType
  v1.Deployment:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      spec:
        allOf:
        - $ref: '#/definitions/v1.DeploymentSpec'
        description: |-
          Specification of the desired behavior of the Deployment.
          +optional
      status:
        allOf:
        - $ref: '#/definitions/v1.DeploymentStatus'
        description: |-
          Most recently observed status of the Deployment.
          +optional
    type: object
  v1.DeploymentCondition:
    properties:
      lastTransitionTime:
        description: Last time the condition transitioned from one status to another.
        type: string
      lastUpdateTime:
        description: The last time this condition was updated.
        type: string
      message:
        description: A human readable message indicating details about the transition.
        type: string
      reason:
        description: The reason for the condition's last transition.
        type: string
      status:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.ConditionStatus'
        description: Status of the condition, one of True, False, Unknown.
      type:
        allOf:
        - $ref: '#/definitions/v1.DeploymentConditionType'
        description: Type of deployment condition.
    type: object
  v1.DeploymentConditionType:
    enum:
    - Available
    - Progressing
    - ReplicaFailure
    type: string
    x-enum-varnames:
    - DeploymentAvailable
    - DeploymentProgressing
    - DeploymentReplicaFailure
  v1.DeploymentSpec:
    properties:
      minReadySeconds:
        description: |-
          Minimum number of seconds for which a newly created pod should be ready
          without any of its container crashing, for it to be considered available.
          Defaults to 0 (pod will be considered available as soon as it is ready)
          +optional
        type: integer
      paused:
        description: |-
          Indicates that the deployment is paused.
          +optional
        type: boolean
      progressDeadlineSeconds:
        description: |-
          The maximum time in seconds for a deployment to make progress before it
          is considered to be failed. The deployment controller will continue to
          process failed deployments and a condition with a ProgressDeadlineExceeded
          reason will be surfaced in the deployment status. Note that progress will
          not be estimated during the time a deployment is paused. Defaults to 600s.
        type: integer
      replicas:
        description: |-
          Number of desired pods. This is a pointer to distinguish between explicit
          zero and not specified. Defaults to 1.
          +optional
        type: integer
      revisionHistoryLimit:
        description: |-
          The number of old ReplicaSets to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
          Defaults to 10.
          +optional
        type: integer
      selector:
        allOf:
        - $ref: '#/definitions/v1.LabelSelector'
        description: |-
          Label selector for pods. Existing ReplicaSets whose pods are
          selected by this will be the ones affected by this deployment.
          It must match the pod template's labels.
      strategy:
        allOf:
        - $ref: '#/definitions/v1.DeploymentStrategy'
        description: |-
          The deployment strategy to use to replace existing pods with new ones.
          +optional
          +patchStrategy=retainKeys
      template:
        allOf:
        - $ref: '#/definitions/v1.PodTemplateSpec'
        description: |-
          Template describes the pods that will be created.
          The only allowed template.spec.restartPolicy value is "Always".
    type: object
  v1.DeploymentStatus:
    properties:
      availableReplicas:
        description: |-
          Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
          +optional
        type: integer
      collisionCount:
        description: |-
          Count of hash collisions for the Deployment. The Deployment controller uses this
          field as a collision avoidance mechanism when it needs to create the name for the
          newest ReplicaSet.
          +optional
        type: integer
      conditions:
        description: |-
          Represents the latest available observations of a deployment's current state.
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.DeploymentCondition'
        type: array
      observedGeneration:
        description: |-
          The generation observed by the deployment controller.
          +optional
        type: integer
      readyReplicas:
        description: |-
          readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
          +optional
        type: integer
      replicas:
        description: |-
          Total number of non-terminated pods targeted by this deployment (their labels match the selector).
          +optional
        type: integer
      unavailableReplicas:
        description: |-
          Total number of unavailable pods targeted by this deployment. This is the total number of
          pods that are still required for the deployment to have 100% available capacity. They may
          either be pods that are running but not yet available or pods that still have not been created.
          +optional
        type: integer
      updatedReplicas:
        description: |-
          Total number of non-terminated pods targeted by this deployment that have the desired template spec.
          +optional
        type: integer
    type: object
  v1.DeploymentStrategy:
    properties:
      rollingUpdate:
        allOf:
        - $ref: '#/definitions/v1.RollingUpdateDeployment'
        description: |-
          Rolling update config params. Present only if DeploymentStrategyType =
          RollingUpdate.
          ---
          TODO: Update this to follow our convention for oneOf, whatever we decide it
          to be.
          +optional
      type:
        allOf:
        - $ref: '#/definitions/v1.DeploymentStrategyType'
        description: |-
          Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
          +optional
    type: object
  v1.DeploymentStrategyType:
    enum:
    - Recreate
    - RollingUpdate
    type: string
    x-enum-varnames:
    - RecreateDeploymentStrategyType
    - RollingUpdateDeploymentStrategyType
  v1.DownwardAPIProjection:
    properties:
      items:
        description: |-
          Items is a list of DownwardAPIVolume file
          +optional
        items:
          $ref: '#/definitions/v1.DownwardAPIVolumeFile'
        type: array
    type: object
  v1.DownwardAPIVolumeFile:
    properties:
      fieldRef:
        allOf:
        - $ref: '#/definitions/v1.ObjectFieldSelector'
        description: |-
          Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
          +optional
      mode:
        description: |-
          Optional: mode bits used to set permissions on this file, must be an octal value
          between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      path:
        description: 'Required: Path is  the relative path name of the file to be
          created. Must not be absolute or contain the ''..'' path. Must be utf-8
          encoded. The first item of the relative path must not start with ''..'''
        type: string
      resourceFieldRef:
        allOf:
        - $ref: '#/definitions/v1.ResourceFieldSelector'
        description: |-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
          +optional
    type: object
  v1.DownwardAPIVolumeSource:
    properties:
      defaultMode:
        description: |-
          Optional: mode bits to use on created files by default. Must be a
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      items:
        description: |-
          Items is a list of downward API volume file
          +optional
        items:
          $ref: '#/definitions/v1.DownwardAPIVolumeFile'
        type: array
    type: object
  v1.EmptyDirVolumeSource:
    properties:
      medium:
        allOf:
        - $ref: '#/definitions/v1.StorageMedium'
        description: |-
          medium represents what type of storage medium should back this directory.
          The default is "" which means to use the node's default medium.
          Must be an empty string (default) or Memory.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          +optional
      sizeLimit:
        allOf:
        - $ref: '#/definitions/resource.Quantity'
        description: |-
          sizeLimit is the total amount of local storage required for this EmptyDir volume.
          The size limit is also applicable for memory medium.
          The maximum usage on memory medium EmptyDir would be the minimum value between
          the SizeLimit specified here and the sum of memory limits of all containers in a pod.
          The default is nil which means that the limit is undefined.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          +optional
    type: object
  v1.EnvFromSource:
    properties:
      configMapRef:
        allOf:
        - $ref: '#/definitions/v1.ConfigMapEnvSource'
        description: |-
          The ConfigMap to select from
          +optional
      prefix:
        description: |-
          An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
          +optional
        type: string
      secretRef:
        allOf:
        - $ref: '#/definitions/v1.SecretEnvSource'
        description: |-
          The Secret to select from
          +optional
    type: object
  v1.EnvVar:
    properties:
      name:
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: |-
          Variable references $(VAR_NAME) are expanded
          using the previously defined environment variables in the container and
          any service environment variables. If a variable cannot be resolved,
          the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
          "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
          Escaped references will never be expanded, regardless of whether the variable
          exists or not.
          Defaults to "".
          +optional
        type: string
      valueFrom:
        allOf:
        - $ref: '#/definitions/v1.EnvVarSource'
        description: |-
          Source for the environment variable's value. Cannot be used if value is not empty.
          +optional
    type: object
  v1.EnvVarSource:
    properties:
      configMapKeyRef:
        allOf:
        - $ref: '#/definitions/v1.ConfigMapKeySelector'
        description: |-
          Selects a key of a ConfigMap.
          +optional
      fieldRef:
        allOf:
        - $ref: '#/definitions/v1.ObjectFieldSelector'
        description: |-
          Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
          spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
          +optional
      resourceFieldRef:
        allOf:
        - $ref: '#/definitions/v1.ResourceFieldSelector'
        description: |-
          Selects a resource of the container: only resources limits and requests
          (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
          +optional
      secretKeyRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.SecretKeySelector'
        description: |-
          Selects a key of a secret in the pod's namespace
          +optional
    type: object
  v1.EphemeralContainer:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
          produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
          of whether the variable exists or not. Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/v1.EnvFromSource'
        type: array
      image:
        description: |-
          Container image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
        type: string
      imagePullPolicy:
        allOf:
        - $ref: '#/definitions/v1.PullPolicy'
        description: |-
          Image pull policy.
          One of Always, Never, IfNotPresent.
          Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
          +optional
      lifecycle:
        allOf:
        - $ref: '#/definitions/v1.Lifecycle'
        description: |-
          Lifecycle is not allowed for ephemeral containers.
          +optional
      livenessProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          Probes are not allowed for ephemeral containers.
          +optional
      name:
        description: |-
          Name of the ephemeral container specified as a DNS_LABEL.
          This name must be unique among all containers, init containers and ephemeral containers.
        type: string
      ports:
        description: |-
          Ports are not allowed for ephemeral containers.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/v1.ContainerPort'
        type: array
      readinessProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          Probes are not allowed for ephemeral containers.
          +optional
      resizePolicy:
        description: |-
          Resources resize policy for the container.
          +featureGate=InPlacePodVerticalScaling
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.ContainerResizePolicy'
        type: array
      resources:
        allOf:
        - $ref: '#/definitions/v1.ResourceRequirements'
        description: |-
          Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
          already allocated to the pod.
          +optional
      restartPolicy:
        allOf:
        - $ref: '#/definitions/v1.ContainerRestartPolicy'
        description: |-
          Restart policy for the container to manage the restart behavior of each
          container within a pod.
          This may only be set for init containers. You cannot set this field on
          ephemeral containers.
          +featureGate=SidecarContainers
          +optional
      securityContext:
        allOf:
        - $ref: '#/definitions/v1.SecurityContext'
        description: |-
          Optional: SecurityContext defines the security options the ephemeral container should be run with.
          If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
          +optional
      startupProbe:
        allOf:
        - $ref: '#/definitions/v1.Probe'
        description: |-
          Probes are not allowed for ephemeral containers.
          +optional
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      targetContainerName:
        description: |-
          If set, the name of the container from PodSpec that this ephemeral container targets.
          The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
          If not set then the ephemeral container uses the namespaces configured in the Pod spec.

          The container runtime must implement support for this feature. If the runtime does not
          support namespace targeting then the result of setting this field is undefined.
          +optional
        type: string
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        allOf:
        - $ref: '#/definitions/v1.TerminationMessagePolicy'
        description: |-
          Indicate how the termination message should be populated. File will use the contents of
          terminationMessagePath to populate the container status message on both success and failure.
          FallbackToLogsOnError will use the last chunk of container log output if the termination
          message file is empty and the container exited with an error.
          The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          Defaults to File.
          Cannot be updated.
          +optional
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/v1.VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    type: object
  v1.EphemeralVolumeSource:
    properties:
      volumeClaimTemplate:
        allOf:
        - $ref: '#/definitions/v1.PersistentVolumeClaimTemplate'
        description: |-
          Will be used to create a stand-alone PVC to provision the volume.
          The pod in which this EphemeralVolumeSource is embedded will be the
          owner of the PVC, i.e. the PVC will be deleted together with the
          pod.  The name of the PVC will be `<pod name>-<volume name>` where
          `<volume name>` is the name from the `PodSpec.Volumes` array
          entry. Pod validation will reject the pod if the concatenated name
          is not valid for a PVC (for example, too long).

          An existing PVC with that name that is not owned by the pod
          will *not* be used for the pod to avoid using an unrelated
          volume by mistake. Starting the pod is then blocked until
          the unrelated PVC is removed. If such a pre-created PVC is
          meant to be used by the pod, the PVC has to updated with an
          owner reference to the pod once the pod exists. Normally
          this should not be necessary, but it may be useful when
          manually reconstructing a broken cluster.

          This field is read-only and no changes will be made by Kubernetes
          to the PVC after it has been created.

          Required, must not be nil.
    type: object
  v1.ExecAction:
    properties:
      command:
        description: |-
          Command is the command line to execute inside the container, the working directory for the
          command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
          not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
          a shell, you need to explicitly call out to that shell.
          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.FCVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      lun:
        description: |-
          lun is Optional: FC target lun number
          +optional
        type: integer
      readOnly:
        description: |-
          readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      targetWWNs:
        description: |-
          targetWWNs is Optional: FC target worldwide names (WWNs)
          +optional
        items:
          type: string
        type: array
      wwids:
        description: |-
          wwids Optional: FC volume world wide identifiers (wwids)
          Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.FieldsV1:
    type: object
  v1.FinalizerName:
    enum:
    - kubernetes
    type: string
    x-enum-varnames:
    - FinalizerKubernetes
  v1.FlexVolumeSource:
    properties:
      driver:
        description: driver is the name of the driver to use for this volume.
        type: string
      fsType:
        description: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          +optional
        type: string
      options:
        additionalProperties:
          type: string
        description: |-
          options is Optional: this field holds extra command options if any.
          +optional
        type: object
      readOnly:
        description: |-
          readOnly is Optional: defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        description: |-
          secretRef is Optional: secretRef is reference to the secret object containing
          sensitive information to pass to the plugin scripts. This may be
          empty if no secret object is specified. If the secret object
          contains more than one secret, all secrets are passed to the plugin
          scripts.
          +optional
    type: object
  v1.FlockerVolumeSource:
    properties:
      datasetName:
        description: |-
          datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
          should be considered as deprecated
          +optional
        type: string
      datasetUUID:
        description: |-
          datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
          +optional
        type: string
    type: object
  v1.GCEPersistentDiskVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      partition:
        description: |-
          partition is the partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        type: integer
      pdName:
        description: |-
          pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: string
      readOnly:
        description: |-
          readOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        type: boolean
    type: object
  v1.GRPCAction:
    properties:
      port:
        description: Port number of the gRPC service. Number must be in the range
          1 to 65535.
        type: integer
      service:
        description: |-
          Service is the name of the service to place in the gRPC HealthCheckRequest
          (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

          If this is not specified, the default behavior is defined by gRPC.
          +optional
          +default=""
        type: string
    type: object
  v1.GitRepoVolumeSource:
    properties:
      directory:
        description: |-
          directory is the target directory name.
          Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
          git repository.  Otherwise, if specified, the volume will contain the git repository in
          the subdirectory with the given name.
          +optional
        type: string
      repository:
        description: repository is the URL
        type: string
      revision:
        description: |-
          revision is the commit hash for the specified revision.
          +optional
        type: string
    type: object
  v1.GlusterfsVolumeSource:
    properties:
      endpoints:
        description: |-
          endpoints is the endpoint name that details Glusterfs topology.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      path:
        description: |-
          path is the Glusterfs volume path.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      readOnly:
        description: |-
          readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
          +optional
        type: boolean
    type: object
  v1.HTTPGetAction:
    properties:
      host:
        description: |-
          Host name to connect to, defaults to the pod IP. You probably want to set
          "Host" in httpHeaders instead.
          +optional
        type: string
      httpHeaders:
        description: |-
          Custom headers to set in the request. HTTP allows repeated headers.
          +optional
        items:
          $ref: '#/definitions/v1.HTTPHeader'
        type: array
      path:
        description: |-
          Path to access on the HTTP server.
          +optional
        type: string
      port:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          Name or number of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
      scheme:
        allOf:
        - $ref: '#/definitions/v1.URIScheme'
        description: |-
          Scheme to use for connecting to the host.
          Defaults to HTTP.
          +optional
    type: object
  v1.HTTPHeader:
    properties:
      name:
        description: |-
          The header field name.
          This will be canonicalized upon output, so case-variant names will be understood as the same header.
        type: string
      value:
        description: The header field value
        type: string
    type: object
  v1.HTTPIngressPath:
    properties:
      backend:
        allOf:
        - $ref: '#/definitions/v1.IngressBackend'
        description: |-
          backend defines the referenced service endpoint to which the traffic
          will be forwarded to.
      path:
        description: |-
          path is matched against the path of an incoming request. Currently it can
          contain characters disallowed from the conventional "path" part of a URL
          as defined by RFC 3986. Paths must begin with a '/' and must be present
          when using PathType with value "Exact" or "Prefix".
          +optional
        type: string
      pathType:
        allOf:
        - $ref: '#/definitions/v1.PathType'
        description: |-
          pathType determines the interpretation of the path matching. PathType can
          be one of the following values:
          * Exact: Matches the URL path exactly.
          * Prefix: Matches based on a URL path prefix split by '/'. Matching is
            done on a path element by element basis. A path element refers is the
            list of labels in the path split by the '/' separator. A request is a
            match for path p if every p is an element-wise prefix of p of the
            request path. Note that if the last element of the path is a substring
            of the last element in request path, it is not a match (e.g. /foo/bar
            matches /foo/bar/baz, but does not match /foo/barbaz).
          * ImplementationSpecific: Interpretation of the Path matching is up to
            the IngressClass. Implementations can treat this as a separate PathType
            or treat it identically to Prefix or Exact path types.
          Implementations are required to support all path types.
    type: object
  v1.HTTPIngressRuleValue:
    properties:
      paths:
        description: |-
          paths is a collection of paths that map requests to backends.
          +listType=atomic
        items:
          $ref: '#/definitions/v1.HTTPIngressPath'
        type: array
    type: object
  v1.HostAlias:
    properties:
      hostnames:
        description: Hostnames for the above IP address.
        items:
          type: string
        type: array
      ip:
        description: IP address of the host file entry.
        type: string
    type: object
  v1.HostIP:
    properties:
      ip:
        description: IP is the IP address assigned to the host
        type: string
    type: object
  v1.HostPathType:
    enum:
    - ""
    - DirectoryOrCreate
    - Directory
    - FileOrCreate
    - File
    - Socket
    - CharDevice
    - BlockDevice
    type: string
    x-enum-varnames:
    - HostPathUnset
    - HostPathDirectoryOrCreate
    - HostPathDirectory
    - HostPathFileOrCreate
    - HostPathFile
    - HostPathSocket
    - HostPathCharDev
    - HostPathBlockDev
  v1.HostPathVolumeSource:
    properties:
      path:
        description: |-
          path of the directory on the host.
          If the path is a symlink, it will follow the link to the real path.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: string
      type:
        allOf:
        - $ref: '#/definitions/v1.HostPathType'
        description: |-
          type for HostPath Volume
          Defaults to ""
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
          +optional
    type: object
  v1.IPFamily:
    enum:
    - IPv4
    - IPv6
    type: string
    x-enum-varnames:
    - IPv4Protocol
    - IPv6Protocol
  v1.IPFamilyPolicy:
    enum:
    - SingleStack
    - PreferDualStack
    - RequireDualStack
    type: string
    x-enum-varnames:
    - IPFamilyPolicySingleStack
    - IPFamilyPolicyPreferDualStack
    - IPFamilyPolicyRequireDualStack
  v1.ISCSIVolumeSource:
    properties:
      chapAuthDiscovery:
        description: |-
          chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
          +optional
        type: boolean
      chapAuthSession:
        description: |-
          chapAuthSession defines whether support iSCSI Session CHAP authentication
          +optional
        type: boolean
      fsType:
        description: |-
          fsType is the filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      initiatorName:
        description: |-
          initiatorName is the custom iSCSI Initiator Name.
          If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
          <target portal>:<volume name> will be created for the connection.
          +optional
        type: string
      iqn:
        description: iqn is the target iSCSI Qualified Name.
        type: string
      iscsiInterface:
        description: |-
          iscsiInterface is the interface Name that uses an iSCSI transport.
          Defaults to 'default' (tcp).
          +optional
        type: string
      lun:
        description: lun represents iSCSI Target Lun number.
        type: integer
      portals:
        description: |-
          portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
          +optional
        items:
          type: string
        type: array
      readOnly:
        description: |-
          readOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          +optional
        type: boolean
      secretRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        description: |-
          secretRef is the CHAP Secret for iSCSI target and initiator authentication
          +optional
      targetPortal:
        description: |-
          targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
        type: string
    type: object
  v1.Ingress:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      spec:
        allOf:
        - $ref: '#/definitions/v1.IngressSpec'
        description: |-
          spec is the desired state of the Ingress.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
      status:
        allOf:
        - $ref: '#/definitions/v1.IngressStatus'
        description: |-
          status is the current state of the Ingress.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
    type: object
  v1.IngressBackend:
    properties:
      resource:
        allOf:
        - $ref: '#/definitions/v1.TypedLocalObjectReference'
        description: |-
          resource is an ObjectRef to another Kubernetes resource in the namespace
          of the Ingress object. If resource is specified, a service.Name and
          service.Port must not be specified.
          This is a mutually exclusive setting with "Service".
          +optional
      service:
        allOf:
        - $ref: '#/definitions/v1.IngressServiceBackend'
        description: |-
          service references a service as a backend.
          This is a mutually exclusive setting with "Resource".
          +optional
    type: object
  v1.IngressLoadBalancerIngress:
    properties:
      hostname:
        description: |-
          hostname is set for load-balancer ingress points that are DNS based.
          +optional
        type: string
      ip:
        description: |-
          ip is set for load-balancer ingress points that are IP based.
          +optional
        type: string
      ports:
        description: |-
          ports provides information about the ports exposed by this LoadBalancer.
          +listType=atomic
          +optional
        items:
          $ref: '#/definitions/v1.IngressPortStatus'
        type: array
    type: object
  v1.IngressLoadBalancerStatus:
    properties:
      ingress:
        description: |-
          ingress is a list containing ingress points for the load-balancer.
          +optional
        items:
          $ref: '#/definitions/v1.IngressLoadBalancerIngress'
        type: array
    type: object
  v1.IngressPortStatus:
    properties:
      error:
        description: |-
          error is to record the problem with the service port
          The format of the error shall comply with the following rules:
          - built-in error values shall be specified in this file and those shall use
            CamelCase names
          - cloud provider specific error values must have names that comply with the
            format foo.example.com/CamelCase.
          ---
          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
          +optional
          +kubebuilder:validation:Required
          +kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`
          +kubebuilder:validation:MaxLength=316
        type: string
      port:
        description: port is the port number of the ingress port.
        type: integer
      protocol:
        allOf:
        - $ref: '#/definitions/v1.Protocol'
        description: |-
          protocol is the protocol of the ingress port.
          The supported values are: "TCP", "UDP", "SCTP"
    type: object
  v1.IngressRule:
    properties:
      host:
        description: "host is the fully qualified domain name of a network host, as
          defined by RFC 3986.\nNote the following deviations from the \"host\" part
          of the\nURI as defined in RFC 3986:\n1. IPs are not allowed. Currently an
          IngressRuleValue can only apply to\n   the IP in the Spec of the parent
          Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t
          \ Currently the port of an Ingress is implicitly :80 for http and\n\t  :443
          for https.\nBoth these may change in the future.\nIncoming requests are
          matched against the host before the\nIngressRuleValue. If the host is unspecified,
          the Ingress routes all\ntraffic based on the specified IngressRuleValue.\n\nhost
          can be \"precise\" which is a domain name without the terminating dot of\na
          network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name\nprefixed
          with a single wildcard label (e.g. \"*.foo.com\").\nThe wildcard character
          '*' must appear by itself as the first DNS label and\nmatches only a single
          label. You cannot have a wildcard label by itself (e.g. Host == \"*\").\nRequests
          will be matched against the Host field in the following way:\n1. If host
          is precise, the request matches this rule if the http host header is equal
          to Host.\n2. If host is a wildcard, then the request matches this rule if
          the http host header\nis to equal to the suffix (removing the first label)
          of the wildcard rule.\n+optional"
        type: string
      http:
        allOf:
        - $ref: '#/definitions/v1.HTTPIngressRuleValue'
        description: +optional
    type: object
  v1.IngressServiceBackend:
    properties:
      name:
        description: |-
          name is the referenced service. The service must exist in
          the same namespace as the Ingress object.
        type: string
      port:
        allOf:
        - $ref: '#/definitions/v1.ServiceBackendPort'
        description: |-
          port of the referenced service. A port name or port number
          is required for a IngressServiceBackend.
    type: object
  v1.IngressSpec:
    properties:
      defaultBackend:
        allOf:
        - $ref: '#/definitions/v1.IngressBackend'
        description: |-
          defaultBackend is the backend that should handle requests that don't
          match any rule. If Rules are not specified, DefaultBackend must be specified.
          If DefaultBackend is not set, the handling of requests that do not match any
          of the rules will be up to the Ingress controller.
          +optional
      ingressClassName:
        description: |-
          ingressClassName is the name of an IngressClass cluster resource. Ingress
          controller implementations use this field to know whether they should be
          serving this Ingress resource, by a transitive connection
          (controller -> IngressClass -> Ingress resource). Although the
          `kubernetes.io/ingress.class` annotation (simple constant name) was never
          formally defined, it was widely supported by Ingress controllers to create
          a direct binding between Ingress controller and Ingress resources. Newly
          created Ingress resources should prefer using the field. However, even
          though the annotation is officially deprecated, for backwards compatibility
          reasons, ingress controllers should still honor that annotation if present.
          +optional
        type: string
      rules:
        description: |-
          rules is a list of host rules used to configure the Ingress. If unspecified,
          or no rule matches, all traffic is sent to the default backend.
          +listType=atomic
          +optional
        items:
          $ref: '#/definitions/v1.IngressRule'
        type: array
      tls:
        description: |-
          tls represents the TLS configuration. Currently the Ingress only supports a
          single TLS port, 443. If multiple members of this list specify different hosts,
          they will be multiplexed on the same port according to the hostname specified
          through the SNI TLS extension, if the ingress controller fulfilling the
          ingress supports SNI.
          +listType=atomic
          +optional
        items:
          $ref: '#/definitions/v1.IngressTLS'
        type: array
    type: object
  v1.IngressStatus:
    properties:
      loadBalancer:
        allOf:
        - $ref: '#/definitions/v1.IngressLoadBalancerStatus'
        description: |-
          loadBalancer contains the current status of the load-balancer.
          +optional
    type: object
  v1.IngressTLS:
    properties:
      hosts:
        description: |-
          hosts is a list of hosts included in the TLS certificate. The values in
          this list must match the name/s used in the tlsSecret. Defaults to the
          wildcard host setting for the loadbalancer controller fulfilling this
          Ingress, if left unspecified.
          +listType=atomic
          +optional
        items:
          type: string
        type: array
      secretName:
        description: |-
          secretName is the name of the secret used to terminate TLS traffic on
          port 443. Field is left optional to allow TLS routing based on SNI
          hostname alone. If the SNI host in a listener conflicts with the "Host"
          header field used by an IngressRule, the SNI host is used for termination
          and value of the "Host" header is used for routing.
          +optional
        type: string
    type: object
  v1.KeyToPath:
    properties:
      key:
        description: key is the key to project.
        type: string
      mode:
        description: |-
          mode is Optional: mode bits used to set permissions on this file.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      path:
        description: |-
          path is the relative path of the file to map the key to.
          May not be an absolute path.
          May not contain the path element '..'.
          May not start with the string '..'.
        type: string
    type: object
  v1.LabelSelector:
    properties:
      matchExpressions:
        description: |-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
          +optional
        items:
          $ref: '#/definitions/v1.LabelSelectorRequirement'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        description: |-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
          map is equivalent to an element of matchExpressions, whose key field is "key", the
          operator is "In", and the values array contains only "value". The requirements are ANDed.
          +optional
        type: object
    type: object
  v1.LabelSelectorOperator:
    enum:
    - In
    - NotIn
    - Exists
    - DoesNotExist
    type: string
    x-enum-varnames:
    - LabelSelectorOpIn
    - LabelSelectorOpNotIn
    - LabelSelectorOpExists
    - LabelSelectorOpDoesNotExist
  v1.LabelSelectorRequirement:
    properties:
      key:
        description: key is the label key that the selector applies to.
        type: string
      operator:
        allOf:
        - $ref: '#/definitions/v1.LabelSelectorOperator'
        description: |-
          operator represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.
      values:
        description: |-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a strategic
          merge patch.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.Lifecycle:
    properties:
      postStart:
        allOf:
        - $ref: '#/definitions/v1.LifecycleHandler'
        description: |-
          PostStart is called immediately after a container is created. If the handler fails,
          the container is terminated and restarted according to its restart policy.
          Other management of the container blocks until the hook completes.
          More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
          +optional
      preStop:
        allOf:
        - $ref: '#/definitions/v1.LifecycleHandler'
        description: |-
          PreStop is called immediately before a container is terminated due to an
          API request or management event such as liveness/startup probe failure,
          preemption, resource contention, etc. The handler is not called if the
          container crashes or exits. The Pod's termination grace period countdown begins before the
          PreStop hook is executed. Regardless of the outcome of the handler, the
          container will eventually terminate within the Pod's termination grace
          period (unless delayed by finalizers). Other management of the container blocks until the hook completes
          or until the termination grace period is reached.
          More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
          +optional
    type: object
  v1.LifecycleHandler:
    properties:
      exec:
        allOf:
        - $ref: '#/definitions/v1.ExecAction'
        description: |-
          Exec specifies the action to take.
          +optional
      httpGet:
        allOf:
        - $ref: '#/definitions/v1.HTTPGetAction'
        description: |-
          HTTPGet specifies the http request to perform.
          +optional
      tcpSocket:
        allOf:
        - $ref: '#/definitions/v1.TCPSocketAction'
        description: |-
          Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
          for the backward compatibility. There are no validation of this field and
          lifecycle hooks will fail in runtime when tcp handler is specified.
          +optional
    type: object
  v1.LoadBalancerIngress:
    properties:
      hostname:
        description: |-
          Hostname is set for load-balancer ingress points that are DNS based
          (typically AWS load-balancers)
          +optional
        type: string
      ip:
        description: |-
          IP is set for load-balancer ingress points that are IP based
          (typically GCE or OpenStack load-balancers)
          +optional
        type: string
      ports:
        description: |-
          Ports is a list of records of service ports
          If used, every port defined in the service should have an entry in it
          +listType=atomic
          +optional
        items:
          $ref: '#/definitions/v1.PortStatus'
        type: array
    type: object
  v1.LoadBalancerStatus:
    properties:
      ingress:
        description: |-
          Ingress is a list containing ingress points for the load-balancer.
          Traffic intended for the service should be sent to these ingress points.
          +optional
        items:
          $ref: '#/definitions/v1.LoadBalancerIngress'
        type: array
    type: object
  v1.ManagedFieldsEntry:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field
          set because it cannot be automatically converted.
        type: string
      fieldsType:
        description: |-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
        type: string
      fieldsV1:
        allOf:
        - $ref: '#/definitions/v1.FieldsV1'
        description: |-
          FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
          +optional
      manager:
        description: Manager is an identifier of the workflow managing these fields.
        type: string
      operation:
        allOf:
        - $ref: '#/definitions/v1.ManagedFieldsOperationType'
        description: |-
          Operation is the type of operation which lead to this ManagedFieldsEntry being created.
          The only valid values for this field are 'Apply' and 'Update'.
      subresource:
        description: |-
          Subresource is the name of the subresource used to update that object, or
          empty string if the object was updated through the main resource. The
          value of this field is used to distinguish between managers, even if they
          share the same name. For example, a status update will be distinct from a
          regular update using the same manager name.
          Note that the APIVersion field is not related to the Subresource field and
          it always corresponds to the version of the main resource.
        type: string
      time:
        description: |-
          Time is the timestamp of when the ManagedFields entry was added. The
          timestamp will also be updated if a field is added, the manager
          changes any of the owned fields value or removes a field. The
          timestamp does not update when a field is removed from the entry
          because another manager took it over.
          +optional
        type: string
    type: object
  v1.ManagedFieldsOperationType:
    enum:
    - Apply
    - Update
    type: string
    x-enum-varnames:
    - ManagedFieldsOperationApply
    - ManagedFieldsOperationUpdate
  v1.MountPropagationMode:
    enum:
    - None
    - HostToContainer
    - Bidirectional
    type: string
    x-enum-varnames:
    - MountPropagationNone
    - MountPropagationHostToContainer
    - MountPropagationBidirectional
  v1.NFSVolumeSource:
    properties:
      path:
        description: |-
          path that is exported by the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
      readOnly:
        description: |-
          readOnly here will force the NFS export to be mounted with read-only permissions.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
        type: boolean
      server:
        description: |-
          server is the hostname or IP address of the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
    type: object
  v1.Namespace:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      spec:
        allOf:
        - $ref: '#/definitions/v1.NamespaceSpec'
        description: |-
          Spec defines the behavior of the Namespace.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
      status:
        allOf:
        - $ref: '#/definitions/v1.NamespaceStatus'
        description: |-
          Status describes the current status of a Namespace.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
    type: object
  v1.NamespaceCondition:
    properties:
      lastTransitionTime:
        description: +optional
        type: string
      message:
        description: +optional
        type: string
      reason:
        description: +optional
        type: string
      status:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.ConditionStatus'
        description: Status of the condition, one of True, False, Unknown.
      type:
        allOf:
        - $ref: '#/definitions/v1.NamespaceConditionType'
        description: Type of namespace controller condition.
    type: object
  v1.NamespaceConditionType:
    enum:
    - NamespaceDeletionDiscoveryFailure
    - NamespaceDeletionContentFailure
    - NamespaceDeletionGroupVersionParsingFailure
    - NamespaceContentRemaining
    - NamespaceFinalizersRemaining
    type: string
    x-enum-varnames:
    - NamespaceDeletionDiscoveryFailure
    - NamespaceDeletionContentFailure
    - NamespaceDeletionGVParsingFailure
    - NamespaceContentRemaining
    - NamespaceFinalizersRemaining
  v1.NamespacePhase:
    enum:
    - Active
    - Terminating
    type: string
    x-enum-varnames:
    - NamespaceActive
    - NamespaceTerminating
  v1.NamespaceSpec:
    properties:
      finalizers:
        description: |-
          Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
          More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
          +optional
        items:
          $ref: '#/definitions/v1.FinalizerName'
        type: array
    type: object
  v1.NamespaceStatus:
    properties:
      conditions:
        description: |-
          Represents the latest available observations of a namespace's current state.
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.NamespaceCondition'
        type: array
      phase:
        allOf:
        - $ref: '#/definitions/v1.NamespacePhase'
        description: |-
          Phase is the current lifecycle phase of the namespace.
          More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
          +optional
    type: object
  v1.NodeAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/v1.PreferredSchedulingTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        allOf:
        - $ref: '#/definitions/v1.NodeSelector'
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to an update), the system
          may or may not try to eventually evict the pod from its node.
          +optional
    type: object
  v1.NodeInclusionPolicy:
    enum:
    - Ignore
    - Honor
    type: string
    x-enum-varnames:
    - NodeInclusionPolicyIgnore
    - NodeInclusionPolicyHonor
  v1.NodeSelector:
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        items:
          $ref: '#/definitions/v1.NodeSelectorTerm'
        type: array
    type: object
  v1.NodeSelectorOperator:
    enum:
    - In
    - NotIn
    - Exists
    - DoesNotExist
    - Gt
    - Lt
    type: string
    x-enum-varnames:
    - NodeSelectorOpIn
    - NodeSelectorOpNotIn
    - NodeSelectorOpExists
    - NodeSelectorOpDoesNotExist
    - NodeSelectorOpGt
    - NodeSelectorOpLt
  v1.NodeSelectorRequirement:
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
      operator:
        allOf:
        - $ref: '#/definitions/v1.NodeSelectorOperator'
        description: |-
          Represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
      values:
        description: |-
          An array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.NodeSelectorTerm:
    properties:
      matchExpressions:
        description: |-
          A list of node selector requirements by node's labels.
          +optional
        items:
          $ref: '#/definitions/v1.NodeSelectorRequirement'
        type: array
      matchFields:
        description: |-
          A list of node selector requirements by node's fields.
          +optional
        items:
          $ref: '#/definitions/v1.NodeSelectorRequirement'
        type: array
    type: object
  v1.OSName:
    enum:
    - linux
    - windows
    type: string
    x-enum-varnames:
    - Linux
    - Windows
  v1.ObjectFieldSelector:
    properties:
      apiVersion:
        description: |-
          Version of the schema the FieldPath is written in terms of, defaults to "v1".
          +optional
        type: string
      fieldPath:
        description: Path of the field to select in the specified API version.
        type: string
    type: object
  v1.ObjectMeta:
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
          +optional
        type: object
      creationTimestamp:
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was
          created. It is not guaranteed to be set in happens-before order across separate operations.
          Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system.
          Read-only.
          Null for lists.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        type: integer
      deletionTimestamp:
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
          field is set by the server when a graceful deletion is requested by the user, and is not
          directly settable by a client. The resource is expected to be deleted (no longer visible
          from resource lists, and not reachable by name) after the time in this field, once the
          finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the
          future, although it may be shortened or the resource may be deleted prior to this time.
          For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
          by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
          the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
          remove the pod from the API. In the presence of network partitions, this object may still
          exist after this timestamp, until an administrator or automated process can determine the
          resource is fully terminated.
          If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will return a 409.

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/v1.ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
          +optional
        type: string
      uid:
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by
          the server on successful creation of a resource and is not allowed to change on PUT
          operations.

          Populated by the system.
          Read-only.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
          +optional
        type: string
    type: object
  v1.OwnerReference:
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      blockOwnerDeletion:
        description: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
          for how the garbage collector interacts with this field and enforces the foreground deletion.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
        type: boolean
      controller:
        description: |-
          If true, this reference points to the managing controller.
          +optional
        type: boolean
      kind:
        description: |-
          Kind of the referent.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
        type: string
      uid:
        description: |-
          UID of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
        type: string
    type: object
  v1.PathType:
    enum:
    - Exact
    - Prefix
    - ImplementationSpecific
    type: string
    x-enum-varnames:
    - PathTypeExact
    - PathTypePrefix
    - PathTypeImplementationSpecific
  v1.PersistentVolumeAccessMode:
    enum:
    - ReadWriteOnce
    - ReadOnlyMany
    - ReadWriteMany
    - ReadWriteOncePod
    type: string
    x-enum-varnames:
    - ReadWriteOnce
    - ReadOnlyMany
    - ReadWriteMany
    - ReadWriteOncePod
  v1.PersistentVolumeClaimSpec:
    properties:
      accessModes:
        description: |-
          accessModes contains the desired access modes the volume should have.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
          +optional
        items:
          $ref: '#/definitions/v1.PersistentVolumeAccessMode'
        type: array
      dataSource:
        allOf:
        - $ref: '#/definitions/v1.TypedLocalObjectReference'
        description: |-
          dataSource field can be used to specify either:
          * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
          * An existing PVC (PersistentVolumeClaim)
          If the provisioner or an external controller can support the specified data source,
          it will create a new volume based on the contents of the specified data source.
          When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
          and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
          If the namespace is specified, then dataSourceRef will not be copied to dataSource.
          +optional
      dataSourceRef:
        allOf:
        - $ref: '#/definitions/v1.TypedObjectReference'
        description: |-
          dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
          volume is desired. This may be any object from a non-empty API group (non
          core object) or a PersistentVolumeClaim object.
          When this field is specified, volume binding will only succeed if the type of
          the specified object matches some installed volume populator or dynamic
          provisioner.
          This field will replace the functionality of the dataSource field and as such
          if both fields are non-empty, they must have the same value. For backwards
          compatibility, when namespace isn't specified in dataSourceRef,
          both fields (dataSource and dataSourceRef) will be set to the same
          value automatically if one of them is empty and the other is non-empty.
          When namespace is specified in dataSourceRef,
          dataSource isn't set to the same value and must be empty.
          There are three important differences between dataSource and dataSourceRef:
          * While dataSource only allows two specific types of objects, dataSourceRef
            allows any non-core object, as well as PersistentVolumeClaim objects.
          * While dataSource ignores disallowed values (dropping them), dataSourceRef
            preserves all values, and generates an error if a disallowed value is
            specified.
          * While dataSource only allows local objects, dataSourceRef allows objects
            in any namespaces.
          (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
          (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
          +optional
      resources:
        allOf:
        - $ref: '#/definitions/v1.ResourceRequirements'
        description: |-
          resources represents the minimum resources the volume should have.
          If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
          that are lower than previous value but must still be higher than capacity recorded in the
          status field of the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
          +optional
      selector:
        allOf:
        - $ref: '#/definitions/v1.LabelSelector'
        description: |-
          selector is a label query over volumes to consider for binding.
          +optional
      storageClassName:
        description: |-
          storageClassName is the name of the StorageClass required by the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
          +optional
        type: string
      volumeMode:
        allOf:
        - $ref: '#/definitions/v1.PersistentVolumeMode'
        description: |-
          volumeMode defines what type of volume is required by the claim.
          Value of Filesystem is implied when not included in claim spec.
          +optional
      volumeName:
        description: |-
          volumeName is the binding reference to the PersistentVolume backing this claim.
          +optional
        type: string
    type: object
  v1.PersistentVolumeClaimTemplate:
    properties:
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          May contain labels and annotations that will be copied into the PVC
          when creating it. No other fields are allowed and will be rejected during
          validation.

          +optional
      spec:
        allOf:
        - $ref: '#/definitions/v1.PersistentVolumeClaimSpec'
        description: |-
          The specification for the PersistentVolumeClaim. The entire content is
          copied unchanged into the PVC that gets created from this
          template. The same fields as in a PersistentVolumeClaim
          are also valid here.
    type: object
  v1.PersistentVolumeClaimVolumeSource:
    properties:
      claimName:
        description: |-
          claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: string
      readOnly:
        description: |-
          readOnly Will force the ReadOnly setting in VolumeMounts.
          Default false.
          +optional
        type: boolean
    type: object
  v1.PersistentVolumeMode:
    enum:
    - Block
    - Filesystem
    type: string
    x-enum-varnames:
    - PersistentVolumeBlock
    - PersistentVolumeFilesystem
  v1.PhotonPersistentDiskVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
      pdID:
        description: pdID is the ID that identifies Photon Controller persistent disk
        type: string
    type: object
  v1.Pod:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      spec:
        allOf:
        - $ref: '#/definitions/v1.PodSpec'
        description: |-
          Specification of the desired behavior of the pod.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
      status:
        allOf:
        - $ref: '#/definitions/v1.PodStatus'
        description: |-
          Most recently observed status of the pod.
          This data may not be up to date.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
    type: object
  v1.PodAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/v1.WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/v1.PodAffinityTerm'
        type: array
    type: object
  v1.PodAffinityTerm:
    properties:
      labelSelector:
        allOf:
        - $ref: '#/definitions/v1.LabelSelector'
        description: |-
          A label query over a set of resources, in this case pods.
          +optional
      namespaceSelector:
        allOf:
        - $ref: '#/definitions/v1.LabelSelector'
        description: |-
          A label query over the set of namespaces that the term applies to.
          The term is applied to the union of the namespaces selected by this field
          and the ones listed in the namespaces field.
          null selector and null or empty namespaces list means "this pod's namespace".
          An empty selector ({}) matches all namespaces.
          +optional
      namespaces:
        description: |-
          namespaces specifies a static list of namespace names that the term applies to.
          The term is applied to the union of the namespaces listed in this field
          and the ones selected by namespaceSelector.
          null or empty namespaces list and null namespaceSelector means "this pod's namespace".
          +optional
        items:
          type: string
        type: array
      topologyKey:
        description: |-
          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
          the labelSelector in the specified namespaces, where co-located is defined as running on a node
          whose value of the label with key topologyKey matches that of any node on which any of the
          selected pods is running.
          Empty topologyKey is not allowed.
        type: string
    type: object
  v1.PodAntiAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the anti-affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/v1.WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/v1.PodAffinityTerm'
        type: array
    type: object
  v1.PodCondition:
    properties:
      lastProbeTime:
        description: |-
          Last time we probed the condition.
          +optional
        type: string
      lastTransitionTime:
        description: |-
          Last time the condition transitioned from one status to another.
          +optional
        type: string
      message:
        description: |-
          Human-readable message indicating details about last transition.
          +optional
        type: string
      reason:
        description: |-
          Unique, one-word, CamelCase reason for the condition's last transition.
          +optional
        type: string
      status:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.ConditionStatus'
        description: |-
          Status is the status of the condition.
          Can be True, False, Unknown.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
      type:
        allOf:
        - $ref: '#/definitions/v1.PodConditionType'
        description: |-
          Type is the type of the condition.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    type: object
  v1.PodConditionType:
    enum:
    - ContainersReady
    - Initialized
    - Ready
    - PodScheduled
    - DisruptionTarget
    type: string
    x-enum-varnames:
    - ContainersReady
    - PodInitialized
    - PodReady
    - PodScheduled
    - DisruptionTarget
  v1.PodDNSConfig:
    properties:
      nameservers:
        description: |-
          A list of DNS name server IP addresses.
          This will be appended to the base nameservers generated from DNSPolicy.
          Duplicated nameservers will be removed.
          +optional
        items:
          type: string
        type: array
      options:
        description: |-
          A list of DNS resolver options.
          This will be merged with the base options generated from DNSPolicy.
          Duplicated entries will be removed. Resolution options given in Options
          will override those that appear in the base DNSPolicy.
          +optional
        items:
          $ref: '#/definitions/v1.PodDNSConfigOption'
        type: array
      searches:
        description: |-
          A list of DNS search domains for host-name lookup.
          This will be appended to the base search paths generated from DNSPolicy.
          Duplicated search paths will be removed.
          +optional
        items:
          type: string
        type: array
    type: object
  v1.PodDNSConfigOption:
    properties:
      name:
        description: Required.
        type: string
      value:
        description: +optional
        type: string
    type: object
  v1.PodFSGroupChangePolicy:
    enum:
    - OnRootMismatch
    - Always
    type: string
    x-enum-varnames:
    - FSGroupChangeOnRootMismatch
    - FSGroupChangeAlways
  v1.PodIP:
    properties:
      ip:
        description: IP is the IP address assigned to the pod
        type: string
    type: object
  v1.PodOS:
    properties:
      name:
        allOf:
        - $ref: '#/definitions/v1.OSName'
        description: |-
          Name is the name of the operating system. The currently supported values are linux and windows.
          Additional value may be defined in future and can be one of:
          https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
          Clients should expect to handle additional values and treat unrecognized values in this field as os: null
    type: object
  v1.PodPhase:
    enum:
    - Pending
    - Running
    - Succeeded
    - Failed
    - Unknown
    type: string
    x-enum-varnames:
    - PodPending
    - PodRunning
    - PodSucceeded
    - PodFailed
    - PodUnknown
  v1.PodQOSClass:
    enum:
    - Guaranteed
    - Burstable
    - BestEffort
    type: string
    x-enum-varnames:
    - PodQOSGuaranteed
    - PodQOSBurstable
    - PodQOSBestEffort
  v1.PodReadinessGate:
    properties:
      conditionType:
        allOf:
        - $ref: '#/definitions/v1.PodConditionType'
        description: ConditionType refers to a condition in the pod's condition list
          with matching type.
    type: object
  v1.PodResizeStatus:
    enum:
    - Proposed
    - InProgress
    - Deferred
    - Infeasible
    type: string
    x-enum-varnames:
    - PodResizeStatusProposed
    - PodResizeStatusInProgress
    - PodResizeStatusDeferred
    - PodResizeStatusInfeasible
  v1.PodResourceClaim:
    properties:
      name:
        description: |-
          Name uniquely identifies this resource claim inside the pod.
          This must be a DNS_LABEL.
        type: string
      source:
        allOf:
        - $ref: '#/definitions/v1.ClaimSource'
        description: Source describes where to find the ResourceClaim.
    type: object
  v1.PodResourceClaimStatus:
    properties:
      name:
        description: |-
          Name uniquely identifies this resource claim inside the pod.
          This must match the name of an entry in pod.spec.resourceClaims,
          which implies that the string must be a DNS_LABEL.
        type: string
      resourceClaimName:
        description: |-
          ResourceClaimName is the name of the ResourceClaim that was
          generated for the Pod in the namespace of the Pod. It this is
          unset, then generating a ResourceClaim was not necessary. The
          pod.spec.resourceClaims entry can be ignored in this case.

          +optional
        type: string
    type: object
  v1.PodSchedulingGate:
    properties:
      name:
        description: |-
          Name of the scheduling gate.
          Each scheduling gate must have a unique name field.
        type: string
    type: object
  v1.PodSecurityContext:
    properties:
      fsGroup:
        description: |-
          A special supplemental group that applies to all containers in a pod.
          Some volume types allow the Kubelet to change the ownership of that volume
          to be owned by the pod:

          1. The owning GID will be the FSGroup
          2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
          3. The permission bits are OR'd with rw-rw----

          If unset, the Kubelet will not modify the ownership and permissions of any volume.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      fsGroupChangePolicy:
        allOf:
        - $ref: '#/definitions/v1.PodFSGroupChangePolicy'
        description: |-
          fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
          before being exposed inside Pod. This field will only apply to
          volume types which support fsGroup based ownership(and permissions).
          It will have no effect on ephemeral volume types such as: secret, configmaps
          and emptydir.
          Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      seLinuxOptions:
        allOf:
        - $ref: '#/definitions/v1.SELinuxOptions'
        description: |-
          The SELinux context to be applied to all containers.
          If unspecified, the container runtime will allocate a random SELinux context for each
          container.  May also be set in SecurityContext.  If set in
          both SecurityContext and PodSecurityContext, the value specified in SecurityContext
          takes precedence for that container.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      seccompProfile:
        allOf:
        - $ref: '#/definitions/v1.SeccompProfile'
        description: |-
          The seccomp options to use by the containers in this pod.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      supplementalGroups:
        description: |-
          A list of groups applied to the first process run in each container, in addition
          to the container's primary GID, the fsGroup (if specified), and group memberships
          defined in the container image for the uid of the container process. If unspecified,
          no additional groups are added to any container. Note that group memberships
          defined in the container image for the uid of the container process are still effective,
          even if they are not included in this list.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        items:
          type: integer
        type: array
      sysctls:
        description: |-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
          sysctls (by the container runtime) might fail to launch.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        items:
          $ref: '#/definitions/v1.Sysctl'
        type: array
      windowsOptions:
        allOf:
        - $ref: '#/definitions/v1.WindowsSecurityContextOptions'
        description: |-
          The Windows specific settings applied to all containers.
          If unspecified, the options within a container's SecurityContext will be used.
          If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is linux.
          +optional
    type: object
  v1.PodSpec:
    properties:
      activeDeadlineSeconds:
        description: |-
          Optional duration in seconds the pod may be active on the node relative to
          StartTime before the system will actively try to mark it failed and kill associated containers.
          Value must be a positive integer.
          +optional
        type: integer
      affinity:
        allOf:
        - $ref: '#/definitions/v1.Affinity'
        description: |-
          If specified, the pod's scheduling constraints
          +optional
      automountServiceAccountToken:
        description: |-
          AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
          +optional
        type: boolean
      containers:
        description: |-
          List of containers belonging to the pod.
          Containers cannot currently be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated.
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.Container'
        type: array
      dnsConfig:
        allOf:
        - $ref: '#/definitions/v1.PodDNSConfig'
        description: |-
          Specifies the DNS parameters of a pod.
          Parameters specified here will be merged to the generated DNS
          configuration based on DNSPolicy.
          +optional
      dnsPolicy:
        allOf:
        - $ref: '#/definitions/v1.DNSPolicy'
        description: |-
          Set DNS policy for the pod.
          Defaults to "ClusterFirst".
          Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
          DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
          To have DNS options set along with hostNetwork, you have to specify DNS policy
          explicitly to 'ClusterFirstWithHostNet'.
          +optional
      enableServiceLinks:
        description: |-
          EnableServiceLinks indicates whether information about services should be injected into pod's
          environment variables, matching the syntax of Docker links.
          Optional: Defaults to true.
          +optional
        type: boolean
      ephemeralContainers:
        description: |-
          List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
          pod to perform user-initiated actions such as debugging. This list cannot be specified when
          creating a pod, and it cannot be modified by updating the pod spec. In order to add an
          ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.EphemeralContainer'
        type: array
      hostAliases:
        description: |-
          HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
          file if specified. This is only valid for non-hostNetwork pods.
          +optional
          +patchMergeKey=ip
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.HostAlias'
        type: array
      hostIPC:
        description: |-
          Use the host's ipc namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostNetwork:
        description: |-
          Host networking requested for this pod. Use the host's network namespace.
          If this option is set, the ports that will be used must be specified.
          Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostPID:
        description: |-
          Use the host's pid namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostUsers:
        description: |-
          Use the host's user namespace.
          Optional: Default to true.
          If set to true or not present, the pod will be run in the host user namespace, useful
          for when the pod needs a feature only available to the host user namespace, such as
          loading a kernel module with CAP_SYS_MODULE.
          When set to false, a new userns is created for the pod. Setting false is useful for
          mitigating container breakout vulnerabilities even allowing users to run their
          containers as root without actually having root privileges on the host.
          This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      hostname:
        description: |-
          Specifies the hostname of the Pod
          If not specified, the pod's hostname will be set to a system-defined value.
          +optional
        type: string
      imagePullSecrets:
        description: |-
          ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
          If specified, these secrets will be passed to individual puller implementations for them to use.
          More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        type: array
      initContainers:
        description: |-
          List of initialization containers belonging to the pod.
          Init containers are executed in order prior to containers being started. If any
          init container fails, the pod is considered to have failed and is handled according
          to its restartPolicy. The name for an init container or normal container must be
          unique among all containers.
          Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
          The resourceRequirements of an init container are taken into account during scheduling
          by finding the highest request/limit for each resource type, and then using the max of
          of that value or the sum of the normal containers. Limits are applied to init containers
          in a similar fashion.
          Init containers cannot currently be added or removed.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.Container'
        type: array
      nodeName:
        description: |-
          NodeName is a request to schedule this pod onto a specific node. If it is non-empty,
          the scheduler simply schedules this pod onto that node, assuming that it fits resource
          requirements.
          +optional
        type: string
      nodeSelector:
        additionalProperties:
          type: string
        description: |-
          NodeSelector is a selector which must be true for the pod to fit on a node.
          Selector which must match a node's labels for the pod to be scheduled on that node.
          More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          +optional
          +mapType=atomic
        type: object
      os:
        allOf:
        - $ref: '#/definitions/v1.PodOS'
        description: |-
          Specifies the OS of the containers in the pod.
          Some pod and container fields are restricted if this is set.

          If the OS field is set to linux, the following fields must be unset:
          -securityContext.windowsOptions

          If the OS field is set to windows, following fields must be unset:
          - spec.hostPID
          - spec.hostIPC
          - spec.hostUsers
          - spec.securityContext.seLinuxOptions
          - spec.securityContext.seccompProfile
          - spec.securityContext.fsGroup
          - spec.securityContext.fsGroupChangePolicy
          - spec.securityContext.sysctls
          - spec.shareProcessNamespace
          - spec.securityContext.runAsUser
          - spec.securityContext.runAsGroup
          - spec.securityContext.supplementalGroups
          - spec.containers[*].securityContext.seLinuxOptions
          - spec.containers[*].securityContext.seccompProfile
          - spec.containers[*].securityContext.capabilities
          - spec.containers[*].securityContext.readOnlyRootFilesystem
          - spec.containers[*].securityContext.privileged
          - spec.containers[*].securityContext.allowPrivilegeEscalation
          - spec.containers[*].securityContext.procMount
          - spec.containers[*].securityContext.runAsUser
          - spec.containers[*].securityContext.runAsGroup
          +optional
      overhead:
        allOf:
        - $ref: '#/definitions/v1.ResourceList'
        description: |-
          Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
          This field will be autopopulated at admission time by the RuntimeClass admission controller. If
          the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
          The RuntimeClass admission controller will reject Pod create requests which have the overhead already
          set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
          defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
          More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
          +optional
      preemptionPolicy:
        allOf:
        - $ref: '#/definitions/v1.PreemptionPolicy'
        description: |-
          PreemptionPolicy is the Policy for preempting pods with lower priority.
          One of Never, PreemptLowerPriority.
          Defaults to PreemptLowerPriority if unset.
          +optional
      priority:
        description: |-
          The priority value. Various system components use this field to find the
          priority of the pod. When Priority Admission Controller is enabled, it
          prevents users from setting this field. The admission controller populates
          this field from PriorityClassName.
          The higher the value, the higher the priority.
          +optional
        type: integer
      priorityClassName:
        description: |-
          If specified, indicates the pod's priority. "system-node-critical" and
          "system-cluster-critical" are two special keywords which indicate the
          highest priorities with the former being the highest priority. Any other
          name must be defined by creating a PriorityClass object with that name.
          If not specified, the pod priority will be default or zero if there is no
          default.
          +optional
        type: string
      readinessGates:
        description: |-
          If specified, all readiness gates will be evaluated for pod readiness.
          A pod is ready when all its containers are ready AND
          all conditions specified in the readiness gates have status equal to "True"
          More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
          +optional
        items:
          $ref: '#/definitions/v1.PodReadinessGate'
        type: array
      resourceClaims:
        description: |-
          ResourceClaims defines which ResourceClaims must be allocated
          and reserved before the Pod is allowed to start. The resources
          will be made available to those containers which consume them
          by name.

          This is an alpha field and requires enabling the
          DynamicResourceAllocation feature gate.

          This field is immutable.

          +patchMergeKey=name
          +patchStrategy=merge,retainKeys
          +listType=map
          +listMapKey=name
          +featureGate=DynamicResourceAllocation
          +optional
        items:
          $ref: '#/definitions/v1.PodResourceClaim'
        type: array
      restartPolicy:
        allOf:
        - $ref: '#/definitions/v1.RestartPolicy'
        description: |-
          Restart policy for all containers within the pod.
          One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
          Default to Always.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
          +optional
      runtimeClassName:
        description: |-
          RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
          to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
          If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
          empty definition that uses the default runtime handler.
          More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
          +optional
        type: string
      schedulerName:
        description: |-
          If specified, the pod will be dispatched by specified scheduler.
          If not specified, the pod will be dispatched by default scheduler.
          +optional
        type: string
      schedulingGates:
        description: |-
          SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
          If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
          scheduler will not attempt to schedule the pod.

          SchedulingGates can only be set at pod creation time, and be removed only afterwards.

          This is a beta feature enabled by the PodSchedulingReadiness feature gate.

          +patchMergeKey=name
          +patchStrategy=merge
          +listType=map
          +listMapKey=name
          +featureGate=PodSchedulingReadiness
          +optional
        items:
          $ref: '#/definitions/v1.PodSchedulingGate'
        type: array
      securityContext:
        allOf:
        - $ref: '#/definitions/v1.PodSecurityContext'
        description: |-
          SecurityContext holds pod-level security attributes and common container settings.
          Optional: Defaults to empty.  See type description for default values of each field.
          +optional
      serviceAccount:
        description: |-
          DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
          Deprecated: Use serviceAccountName instead.
          +k8s:conversion-gen=false
          +optional
        type: string
      serviceAccountName:
        description: |-
          ServiceAccountName is the name of the ServiceAccount to use to run this pod.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
          +optional
        type: string
      setHostnameAsFQDN:
        description: |-
          If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
          In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
          In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
          If a pod does not have FQDN, this has no effect.
          Default to false.
          +optional
        type: boolean
      shareProcessNamespace:
        description: |-
          Share a single process namespace between all of the containers in a pod.
          When this is set containers will be able to view and signal processes from other containers
          in the same pod, and the first process in each container will not be assigned PID 1.
          HostPID and ShareProcessNamespace cannot both be set.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
      subdomain:
        description: |-
          If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
          If not specified, the pod will not have a domainname at all.
          +optional
        type: string
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
          Value must be non-negative integer. The value zero indicates stop immediately via
          the kill signal (no opportunity to shut down).
          If this value is nil, the default grace period will be used instead.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          Defaults to 30 seconds.
          +optional
        type: integer
      tolerations:
        description: |-
          If specified, the pod's tolerations.
          +optional
        items:
          $ref: '#/definitions/v1.Toleration'
        type: array
      topologySpreadConstraints:
        description: |-
          TopologySpreadConstraints describes how a group of pods ought to spread across topology
          domains. Scheduler will schedule pods in a way which abides by the constraints.
          All topologySpreadConstraints are ANDed.
          +optional
          +patchMergeKey=topologyKey
          +patchStrategy=merge
          +listType=map
          +listMapKey=topologyKey
          +listMapKey=whenUnsatisfiable
        items:
          $ref: '#/definitions/v1.TopologySpreadConstraint'
        type: array
      volumes:
        description: |-
          List of volumes that can be mounted by containers belonging to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes
          +optional
          +patchMergeKey=name
          +patchStrategy=merge,retainKeys
        items:
          $ref: '#/definitions/v1.Volume'
        type: array
    type: object
  v1.PodStatus:
    properties:
      conditions:
        description: |-
          Current service state of pod.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/v1.PodCondition'
        type: array
      containerStatuses:
        description: |-
          The list has one entry per container in the manifest.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
          +optional
        items:
          $ref: '#/definitions/v1.ContainerStatus'
        type: array
      ephemeralContainerStatuses:
        description: |-
          Status for any ephemeral containers that have run in this pod.
          +optional
        items:
          $ref: '#/definitions/v1.ContainerStatus'
        type: array
      hostIP:
        description: |-
          hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet.
          A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will
          not be updated even if there is a node is assigned to pod
          +optional
        type: string
      hostIPs:
        description: |-
          hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must
          match the hostIP field. This list is empty if the pod has not started yet.
          A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will
          not be updated even if there is a node is assigned to this pod.
          +optional
          +patchStrategy=merge
          +patchMergeKey=ip
          +listType=atomic
        items:
          $ref: '#/definitions/v1.HostIP'
        type: array
      initContainerStatuses:
        description: |-
          The list has one entry per init container in the manifest. The most recent successful
          init container will have ready = true, the most recently started container will have
          startTime set.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        items:
          $ref: '#/definitions/v1.ContainerStatus'
        type: array
      message:
        description: |-
          A human readable message indicating details about why the pod is in this condition.
          +optional
        type: string
      nominatedNodeName:
        description: |-
          nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be
          scheduled right away as preemption victims receive their graceful termination periods.
          This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide
          to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to
          give the resources on this node to a higher priority pod that is created after preemption.
          As a result, this field may be different than PodSpec.nodeName when the pod is
          scheduled.
          +optional
        type: string
      phase:
        allOf:
        - $ref: '#/definitions/v1.PodPhase'
        description: |-
          The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle.
          The conditions array, the reason and message fields, and the individual container status
          arrays contain more detail about the pod's status.
          There are five possible phase values:

          Pending: The pod has been accepted by the Kubernetes system, but one or more of the
          container images has not been created. This includes time before being scheduled as
          well as time spent downloading images over the network, which could take a while.
          Running: The pod has been bound to a node, and all of the containers have been created.
          At least one container is still running, or is in the process of starting or restarting.
          Succeeded: All containers in the pod have terminated in success, and will not be restarted.
          Failed: All containers in the pod have terminated, and at least one container has
          terminated in failure. The container either exited with non-zero status or was terminated
          by the system.
          Unknown: For some reason the state of the pod could not be obtained, typically due to an
          error in communicating with the host of the pod.

          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
          +optional
      podIP:
        description: |-
          podIP address allocated to the pod. Routable at least within the cluster.
          Empty if not yet allocated.
          +optional
        type: string
      podIPs:
        description: |-
          podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must
          match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list
          is empty if no IPs have been allocated yet.
          +optional
          +patchStrategy=merge
          +patchMergeKey=ip
        items:
          $ref: '#/definitions/v1.PodIP'
        type: array
      qosClass:
        allOf:
        - $ref: '#/definitions/v1.PodQOSClass'
        description: |-
          The Quality of Service (QOS) classification assigned to the pod based on resource requirements
          See PodQOSClass type for available QOS classes
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
          +optional
      reason:
        description: |-
          A brief CamelCase message indicating details about why the pod is in this state.
          e.g. 'Evicted'
          +optional
        type: string
      resize:
        allOf:
        - $ref: '#/definitions/v1.PodResizeStatus'
        description: |-
          Status of resources resize desired for pod's containers.
          It is empty if no resources resize is pending.
          Any changes to container resources will automatically set this to "Proposed"
          +featureGate=InPlacePodVerticalScaling
          +optional
      resourceClaimStatuses:
        description: |-
          Status of resource claims.
          +patchMergeKey=name
          +patchStrategy=merge,retainKeys
          +listType=map
          +listMapKey=name
          +featureGate=DynamicResourceAllocation
          +optional
        items:
          $ref: '#/definitions/v1.PodResourceClaimStatus'
        type: array
      startTime:
        description: |-
          RFC 3339 date and time at which the object was acknowledged by the Kubelet.
          This is before the Kubelet pulled the container image(s) for the pod.
          +optional
        type: string
    type: object
  v1.PodTemplateSpec:
    properties:
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      spec:
        allOf:
        - $ref: '#/definitions/v1.PodSpec'
        description: |-
          Specification of the desired behavior of the pod.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
    type: object
  v1.PortStatus:
    properties:
      error:
        description: |-
          Error is to record the problem with the service port
          The format of the error shall comply with the following rules:
          - built-in error values shall be specified in this file and those shall use
            CamelCase names
          - cloud provider specific error values must have names that comply with the
            format foo.example.com/CamelCase.
          ---
          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
          +optional
          +kubebuilder:validation:Required
          +kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`
          +kubebuilder:validation:MaxLength=316
        type: string
      port:
        description: Port is the port number of the service port of which status is
          recorded here
        type: integer
      protocol:
        allOf:
        - $ref: '#/definitions/v1.Protocol'
        description: |-
          Protocol is the protocol of the service port of which status is recorded here
          The supported values are: "TCP", "UDP", "SCTP"
    type: object
  v1.PortworxVolumeSource:
    properties:
      fsType:
        description: |-
          fSType represents the filesystem type to mount
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
      readOnly:
        description: |-
          readOnly defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      volumeID:
        description: volumeID uniquely identifies a Portworx volume
        type: string
    type: object
  v1.PreemptionPolicy:
    enum:
    - PreemptLowerPriority
    - Never
    type: string
    x-enum-varnames:
    - PreemptLowerPriority
    - PreemptNever
  v1.PreferredSchedulingTerm:
    properties:
      preference:
        allOf:
        - $ref: '#/definitions/v1.NodeSelectorTerm'
        description: A node selector term, associated with the corresponding weight.
      weight:
        description: Weight associated with matching the corresponding nodeSelectorTerm,
          in the range 1-100.
        type: integer
    type: object
  v1.Probe:
    properties:
      exec:
        allOf:
        - $ref: '#/definitions/v1.ExecAction'
        description: |-
          Exec specifies the action to take.
          +optional
      failureThreshold:
        description: |-
          Minimum consecutive failures for the probe to be considered failed after having succeeded.
          Defaults to 3. Minimum value is 1.
          +optional
        type: integer
      grpc:
        allOf:
        - $ref: '#/definitions/v1.GRPCAction'
        description: |-
          GRPC specifies an action involving a GRPC port.
          +optional
      httpGet:
        allOf:
        - $ref: '#/definitions/v1.HTTPGetAction'
        description: |-
          HTTPGet specifies the http request to perform.
          +optional
      initialDelaySeconds:
        description: |-
          Number of seconds after the container has started before liveness probes are initiated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        type: integer
      periodSeconds:
        description: |-
          How often (in seconds) to perform the probe.
          Default to 10 seconds. Minimum value is 1.
          +optional
        type: integer
      successThreshold:
        description: |-
          Minimum consecutive successes for the probe to be considered successful after having failed.
          Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
          +optional
        type: integer
      tcpSocket:
        allOf:
        - $ref: '#/definitions/v1.TCPSocketAction'
        description: |-
          TCPSocket specifies an action involving a TCP port.
          +optional
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
          value overrides the value provided by the pod spec.
          Value must be non-negative integer. The value zero indicates stop immediately via
          the kill signal (no opportunity to shut down).
          This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
          Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
          +optional
        type: integer
      timeoutSeconds:
        description: |-
          Number of seconds after which the probe times out.
          Defaults to 1 second. Minimum value is 1.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        type: integer
    type: object
  v1.ProcMountType:
    enum:
    - Default
    - Unmasked
    type: string
    x-enum-varnames:
    - DefaultProcMount
    - UnmaskedProcMount
  v1.ProjectedVolumeSource:
    properties:
      defaultMode:
        description: |-
          defaultMode are the mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      sources:
        description: |-
          sources is the list of volume projections
          +optional
        items:
          $ref: '#/definitions/v1.VolumeProjection'
        type: array
    type: object
  v1.Protocol:
    enum:
    - TCP
    - UDP
    - SCTP
    type: string
    x-enum-varnames:
    - ProtocolTCP
    - ProtocolUDP
    - ProtocolSCTP
  v1.PullPolicy:
    enum:
    - Always
    - Never
    - IfNotPresent
    type: string
    x-enum-varnames:
    - PullAlways
    - PullNever
    - PullIfNotPresent
  v1.QuobyteVolumeSource:
    properties:
      group:
        description: |-
          group to map volume access to
          Default is no group
          +optional
        type: string
      readOnly:
        description: |-
          readOnly here will force the Quobyte volume to be mounted with read-only permissions.
          Defaults to false.
          +optional
        type: boolean
      registry:
        description: |-
          registry represents a single or multiple Quobyte Registry services
          specified as a string as host:port pair (multiple entries are separated with commas)
          which acts as the central registry for volumes
        type: string
      tenant:
        description: |-
          tenant owning the given Quobyte volume in the Backend
          Used with dynamically provisioned Quobyte volumes, value is set by the plugin
          +optional
        type: string
      user:
        description: |-
          user to map volume access to
          Defaults to serivceaccount user
          +optional
        type: string
      volume:
        description: volume is a string that references an already created Quobyte
          volume by name.
        type: string
    type: object
  v1.RBDVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is the filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      image:
        description: |-
          image is the rados image name.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
      keyring:
        description: |-
          keyring is the path to key ring for RBDUser.
          Default is /etc/ceph/keyring.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
      monitors:
        description: |-
          monitors is a collection of Ceph monitors.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        items:
          type: string
        type: array
      pool:
        description: |-
          pool is the rados pool name.
          Default is rbd.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
      readOnly:
        description: |-
          readOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: boolean
      secretRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        description: |-
          secretRef is name of the authentication secret for RBDUser. If provided
          overrides keyring.
          Default is nil.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
      user:
        description: |-
          user is the rados user name.
          Default is admin.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
    type: object
  v1.ResourceClaim:
    properties:
      name:
        description: |-
          Name must match the name of one entry in pod.spec.resourceClaims of
          the Pod where this field is used. It makes that resource available
          inside a container.
        type: string
    type: object
  v1.ResourceFieldSelector:
    properties:
      containerName:
        description: |-
          Container name: required for volumes, optional for env vars
          +optional
        type: string
      divisor:
        allOf:
        - $ref: '#/definitions/resource.Quantity'
        description: |-
          Specifies the output format of the exposed resources, defaults to "1"
          +optional
      resource:
        description: 'Required: resource to select'
        type: string
    type: object
  v1.ResourceList:
    additionalProperties:
      $ref: '#/definitions/resource.Quantity'
    type: object
  v1.ResourceName:
    enum:
    - cpu
    - memory
    - storage
    - ephemeral-storage
    - pods
    - services
    - replicationcontrollers
    - resourcequotas
    - secrets
    - configmaps
    - persistentvolumeclaims
    - services.nodeports
    - services.loadbalancers
    - requests.cpu
    - requests.memory
    - requests.storage
    - requests.ephemeral-storage
    - limits.cpu
    - limits.memory
    - limits.ephemeral-storage
    type: string
    x-enum-varnames:
    - ResourceCPU
    - ResourceMemory
    - ResourceStorage
    - ResourceEphemeralStorage
    - ResourcePods
    - ResourceServices
    - ResourceReplicationControllers
    - ResourceQuotas
    - ResourceSecrets
    - ResourceConfigMaps
    - ResourcePersistentVolumeClaims
    - ResourceServicesNodePorts
    - ResourceServicesLoadBalancers
    - ResourceRequestsCPU
    - ResourceRequestsMemory
    - ResourceRequestsStorage
    - ResourceRequestsEphemeralStorage
    - ResourceLimitsCPU
    - ResourceLimitsMemory
    - ResourceLimitsEphemeralStorage
  v1.ResourceRequirements:
    properties:
      claims:
        description: |-
          Claims lists the names of resources, defined in spec.resourceClaims,
          that are used by this container.

          This is an alpha field and requires enabling the
          DynamicResourceAllocation feature gate.

          This field is immutable. It can only be set for containers.

          +listType=map
          +listMapKey=name
          +featureGate=DynamicResourceAllocation
          +optional
        items:
          $ref: '#/definitions/v1.ResourceClaim'
        type: array
      limits:
        allOf:
        - $ref: '#/definitions/v1.ResourceList'
        description: |-
          Limits describes the maximum amount of compute resources allowed.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
      requests:
        allOf:
        - $ref: '#/definitions/v1.ResourceList'
        description: |-
          Requests describes the minimum amount of compute resources required.
          If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
          otherwise to an implementation-defined value. Requests cannot exceed Limits.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          +optional
    type: object
  v1.ResourceResizeRestartPolicy:
    enum:
    - NotRequired
    - RestartContainer
    type: string
    x-enum-varnames:
    - NotRequired
    - RestartContainer
  v1.RestartPolicy:
    enum:
    - Always
    - OnFailure
    - Never
    type: string
    x-enum-varnames:
    - RestartPolicyAlways
    - RestartPolicyOnFailure
    - RestartPolicyNever
  v1.RollingUpdateDaemonSet:
    properties:
      maxSurge:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          The maximum number of nodes with an existing available DaemonSet pod that
          can have an updated DaemonSet pod during during an update.
          Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
          This can not be 0 if MaxUnavailable is 0.
          Absolute number is calculated from percentage by rounding up to a minimum of 1.
          Default value is 0.
          Example: when this is set to 30%, at most 30% of the total number of nodes
          that should be running the daemon pod (i.e. status.desiredNumberScheduled)
          can have their a new pod created before the old pod is marked as deleted.
          The update starts by launching new pods on 30% of nodes. Once an updated
          pod is available (Ready for at least minReadySeconds) the old DaemonSet pod
          on that node is marked deleted. If the old pod becomes unavailable for any
          reason (Ready transitions to false, is evicted, or is drained) an updated
          pod is immediatedly created on that node without considering surge limits.
          Allowing surge implies the possibility that the resources consumed by the
          daemonset on any given node can double if the readiness check fails, and
          so resource intensive daemonsets should take into account that they may
          cause evictions during disruption.
          +optional
      maxUnavailable:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          The maximum number of DaemonSet pods that can be unavailable during the
          update. Value can be an absolute number (ex: 5) or a percentage of total
          number of DaemonSet pods at the start of the update (ex: 10%). Absolute
          number is calculated from percentage by rounding up.
          This cannot be 0 if MaxSurge is 0
          Default value is 1.
          Example: when this is set to 30%, at most 30% of the total number of nodes
          that should be running the daemon pod (i.e. status.desiredNumberScheduled)
          can have their pods stopped for an update at any given time. The update
          starts by stopping at most 30% of those DaemonSet pods and then brings
          up new DaemonSet pods in their place. Once the new pods are available,
          it then proceeds onto other DaemonSet pods, thus ensuring that at least
          70% of original number of DaemonSet pods are available at all times during
          the update.
          +optional
    type: object
  v1.RollingUpdateDeployment:
    properties:
      maxSurge:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          The maximum number of pods that can be scheduled above the desired number of
          pods.
          Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
          This can not be 0 if MaxUnavailable is 0.
          Absolute number is calculated from percentage by rounding up.
          Defaults to 25%.
          Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
          the rolling update starts, such that the total number of old and new pods do not exceed
          130% of desired pods. Once old pods have been killed,
          new ReplicaSet can be scaled up further, ensuring that total number of pods running
          at any time during the update is at most 130% of desired pods.
          +optional
      maxUnavailable:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          The maximum number of pods that can be unavailable during the update.
          Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
          Absolute number is calculated from percentage by rounding down.
          This can not be 0 if MaxSurge is 0.
          Defaults to 25%.
          Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
          immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
          can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
          that the total number of pods available at all times during the update is at
          least 70% of desired pods.
          +optional
    type: object
  v1.SELinuxOptions:
    properties:
      level:
        description: |-
          Level is SELinux level label that applies to the container.
          +optional
        type: string
      role:
        description: |-
          Role is a SELinux role label that applies to the container.
          +optional
        type: string
      type:
        description: |-
          Type is a SELinux type label that applies to the container.
          +optional
        type: string
      user:
        description: |-
          User is a SELinux user label that applies to the container.
          +optional
        type: string
    type: object
  v1.ScaleIOVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs".
          Default is "xfs".
          +optional
        type: string
      gateway:
        description: gateway is the host address of the ScaleIO API Gateway.
        type: string
      protectionDomain:
        description: |-
          protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
          +optional
        type: string
      readOnly:
        description: |-
          readOnly Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        description: |-
          secretRef references to the secret for ScaleIO user and other
          sensitive information. If this is not provided, Login operation will fail.
      sslEnabled:
        description: |-
          sslEnabled Flag enable/disable SSL communication with Gateway, default false
          +optional
        type: boolean
      storageMode:
        description: |-
          storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
          Default is ThinProvisioned.
          +optional
        type: string
      storagePool:
        description: |-
          storagePool is the ScaleIO Storage Pool associated with the protection domain.
          +optional
        type: string
      system:
        description: system is the name of the storage system as configured in ScaleIO.
        type: string
      volumeName:
        description: |-
          volumeName is the name of a volume already created in the ScaleIO system
          that is associated with this volume source.
        type: string
    type: object
  v1.SeccompProfile:
    properties:
      localhostProfile:
        description: |-
          localhostProfile indicates a profile defined in a file on the node should be used.
          The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured seccomp profile location.
          Must be set if type is "Localhost". Must NOT be set for any other type.
          +optional
        type: string
      type:
        allOf:
        - $ref: '#/definitions/v1.SeccompProfileType'
        description: |-
          type indicates which kind of seccomp profile will be applied.
          Valid options are:

          Localhost - a profile defined in a file on the node should be used.
          RuntimeDefault - the container runtime default profile should be used.
          Unconfined - no profile should be applied.
          +unionDiscriminator
    type: object
  v1.SeccompProfileType:
    enum:
    - Unconfined
    - RuntimeDefault
    - Localhost
    type: string
    x-enum-varnames:
    - SeccompProfileTypeUnconfined
    - SeccompProfileTypeRuntimeDefault
    - SeccompProfileTypeLocalhost
  v1.Secret:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      data:
        additionalProperties:
          items:
            type: integer
          type: array
        description: |-
          Data contains the secret data. Each key must consist of alphanumeric
          characters, '-', '_' or '.'. The serialized form of the secret data is a
          base64 encoded string, representing the arbitrary (possibly non-string)
          data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
          +optional
        type: object
      immutable:
        description: |-
          Immutable, if set to true, ensures that data stored in the Secret cannot
          be updated (only object metadata can be modified).
          If not set to true, the field can be modified at any time.
          Defaulted to nil.
          +optional
        type: boolean
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      stringData:
        additionalProperties:
          type: string
        description: |-
          stringData allows specifying non-binary secret data in string form.
          It is provided as a write-only input field for convenience.
          All keys and values are merged into the data field on write, overwriting any existing values.
          The stringData field is never output when reading from the API.
          +k8s:conversion-gen=false
          +optional
        type: object
      type:
        allOf:
        - $ref: '#/definitions/v1.SecretType'
        description: |-
          Used to facilitate programmatic handling of secret data.
          More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
          +optional
    type: object
  v1.SecretEnvSource:
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret must be defined
          +optional
        type: boolean
    type: object
  v1.SecretProjection:
    properties:
      items:
        description: |-
          items if unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/v1.KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          optional field specify whether the Secret or its key must be defined
          +optional
        type: boolean
    type: object
  v1.SecretType:
    enum:
    - Opaque
    - kubernetes.io/service-account-token
    - kubernetes.io/dockercfg
    - kubernetes.io/dockerconfigjson
    - kubernetes.io/basic-auth
    - kubernetes.io/ssh-auth
    - kubernetes.io/tls
    - bootstrap.kubernetes.io/token
    type: string
    x-enum-varnames:
    - SecretTypeOpaque
    - SecretTypeServiceAccountToken
    - SecretTypeDockercfg
    - SecretTypeDockerConfigJson
    - SecretTypeBasicAuth
    - SecretTypeSSHAuth
    - SecretTypeTLS
    - SecretTypeBootstrapToken
  v1.SecretVolumeSource:
    properties:
      defaultMode:
        description: |-
          defaultMode is Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values
          for mode bits. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        type: integer
      items:
        description: |-
          items If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/v1.KeyToPath'
        type: array
      optional:
        description: |-
          optional field specify whether the Secret or its keys must be defined
          +optional
        type: boolean
      secretName:
        description: |-
          secretName is the name of the secret in the pod's namespace to use.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
        type: string
    type: object
  v1.SecurityContext:
    properties:
      allowPrivilegeEscalation:
        description: |-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is:
          1) run as Privileged
          2) has CAP_SYS_ADMIN
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      capabilities:
        allOf:
        - $ref: '#/definitions/v1.Capabilities'
        description: |-
          The capabilities to add/drop when running containers.
          Defaults to the default set of capabilities granted by the container runtime.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      privileged:
        description: |-
          Run container in privileged mode.
          Processes in privileged containers are essentially equivalent to root on the host.
          Defaults to false.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      procMount:
        allOf:
        - $ref: '#/definitions/v1.ProcMountType'
        description: |-
          procMount denotes the type of proc mount to use for the containers.
          The default is DefaultProcMount which uses the container runtime defaults for
          readonly paths and masked paths.
          This requires the ProcMountType feature flag to be enabled.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      readOnlyRootFilesystem:
        description: |-
          Whether this container has a read-only root filesystem.
          Default is false.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: boolean
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
        type: integer
      seLinuxOptions:
        allOf:
        - $ref: '#/definitions/v1.SELinuxOptions'
        description: |-
          The SELinux context to be applied to the container.
          If unspecified, the container runtime will allocate a random SELinux context for each
          container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      seccompProfile:
        allOf:
        - $ref: '#/definitions/v1.SeccompProfile'
        description: |-
          The seccomp options to use by this container. If seccomp options are
          provided at both the pod & container level, the container options
          override the pod options.
          Note that this field cannot be set when spec.os.name is windows.
          +optional
      windowsOptions:
        allOf:
        - $ref: '#/definitions/v1.WindowsSecurityContextOptions'
        description: |-
          The Windows specific settings applied to all containers.
          If unspecified, the options from the PodSecurityContext will be used.
          If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          Note that this field cannot be set when spec.os.name is linux.
          +optional
    type: object
  v1.Service:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        allOf:
        - $ref: '#/definitions/v1.ObjectMeta'
        description: |-
          Standard object's metadata.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
      spec:
        allOf:
        - $ref: '#/definitions/v1.ServiceSpec'
        description: |-
          Spec defines the behavior of a service.
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
      status:
        allOf:
        - $ref: '#/definitions/v1.ServiceStatus'
        description: |-
          Most recently observed status of the service.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          +optional
    type: object
  v1.ServiceAccountTokenProjection:
    properties:
      audience:
        description: |-
          audience is the intended audience of the token. A recipient of a token
          must identify itself with an identifier specified in the audience of the
          token, and otherwise should reject the token. The audience defaults to the
          identifier of the apiserver.
          +optional
        type: string
      expirationSeconds:
        description: |-
          expirationSeconds is the requested duration of validity of the service
          account token. As the token approaches expiration, the kubelet volume
          plugin will proactively rotate the service account token. The kubelet will
          start trying to rotate the token if the token is older than 80 percent of
          its time to live or if the token is older than 24 hours.Defaults to 1 hour
          and must be at least 10 minutes.
          +optional
        type: integer
      path:
        description: |-
          path is the path relative to the mount point of the file to project the
          token into.
        type: string
    type: object
  v1.ServiceAffinity:
    enum:
    - ClientIP
    - None
    type: string
    x-enum-varnames:
    - ServiceAffinityClientIP
    - ServiceAffinityNone
  v1.ServiceBackendPort:
    properties:
      name:
        description: |-
          name is the name of the port on the Service.
          This is a mutually exclusive setting with "Number".
          +optional
        type: string
      number:
        description: |-
          number is the numerical port number (e.g. 80) on the Service.
          This is a mutually exclusive setting with "Name".
          +optional
        type: integer
    type: object
  v1.ServiceExternalTrafficPolicy:
    enum:
    - Cluster
    - Local
    - Local
    - Cluster
    type: string
    x-enum-varnames:
    - ServiceExternalTrafficPolicyCluster
    - ServiceExternalTrafficPolicyLocal
    - ServiceExternalTrafficPolicyTypeLocal
    - ServiceExternalTrafficPolicyTypeCluster
  v1.ServiceInternalTrafficPolicy:
    enum:
    - Cluster
    - Local
    type: string
    x-enum-varnames:
    - ServiceInternalTrafficPolicyCluster
    - ServiceInternalTrafficPolicyLocal
  v1.ServicePort:
    properties:
      appProtocol:
        description: |-
          The application protocol for this port.
          This is used as a hint for implementations to offer richer behavior for protocols that they understand.
          This field follows standard Kubernetes label syntax.
          Valid values are either:

          * Un-prefixed protocol names - reserved for IANA standard service names (as per
          RFC-6335 and https://www.iana.org/assignments/service-names).

          * Kubernetes-defined prefixed names:
            * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540
            * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
            * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

          * Other protocols should use implementation-defined prefixed names such as
          mycompany.com/my-custom-protocol.
          +optional
        type: string
      name:
        description: |-
          The name of this port within the service. This must be a DNS_LABEL.
          All ports within a ServiceSpec must have unique names. When considering
          the endpoints for a Service, this must match the 'name' field in the
          EndpointPort.
          Optional if only one ServicePort is defined on this service.
          +optional
        type: string
      nodePort:
        description: |-
          The port on each node on which this service is exposed when type is
          NodePort or LoadBalancer.  Usually assigned by the system. If a value is
          specified, in-range, and not in use it will be used, otherwise the
          operation will fail.  If not specified, a port will be allocated if this
          Service requires one.  If this field is specified when creating a
          Service which does not need it, creation will fail. This field will be
          wiped when updating a Service to no longer need it (e.g. changing type
          from NodePort to ClusterIP).
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
          +optional
        type: integer
      port:
        description: The port that will be exposed by this service.
        type: integer
      protocol:
        allOf:
        - $ref: '#/definitions/v1.Protocol'
        description: |-
          The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
          Default is TCP.
          +default="TCP"
          +optional
      targetPort:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          Number or name of the port to access on the pods targeted by the service.
          Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          If this is a string, it will be looked up as a named port in the
          target Pod's container ports. If this is not specified, the value
          of the 'port' field is used (an identity map).
          This field is ignored for services with clusterIP=None, and should be
          omitted or set equal to the 'port' field.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
          +optional
    type: object
  v1.ServiceSpec:
    properties:
      allocateLoadBalancerNodePorts:
        description: |-
          allocateLoadBalancerNodePorts defines if NodePorts will be automatically
          allocated for services with type LoadBalancer.  Default is "true". It
          may be set to "false" if the cluster load-balancer does not rely on
          NodePorts.  If the caller requests specific NodePorts (by specifying a
          value), those requests will be respected, regardless of this field.
          This field may only be set for services with type LoadBalancer and will
          be cleared if the type is changed to any other type.
          +optional
        type: boolean
      clusterIP:
        description: |-
          clusterIP is the IP address of the service and is usually assigned
          randomly. If an address is specified manually, is in-range (as per
          system configuration), and is not in use, it will be allocated to the
          service; otherwise creation of the service will fail. This field may not
          be changed through updates unless the type field is also being changed
          to ExternalName (which requires this field to be blank) or the type
          field is being changed from ExternalName (in which case this field may
          optionally be specified, as describe above).  Valid values are "None",
          empty string (""), or a valid IP address. Setting this to "None" makes a
          "headless service" (no virtual IP), which is useful when direct endpoint
          connections are preferred and proxying is not required.  Only applies to
          types ClusterIP, NodePort, and LoadBalancer. If this field is specified
          when creating a Service of type ExternalName, creation will fail. This
          field will be wiped when updating a Service to type ExternalName.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
          +optional
        type: string
      clusterIPs:
        description: |-
          ClusterIPs is a list of IP addresses assigned to this service, and are
          usually assigned randomly.  If an address is specified manually, is
          in-range (as per system configuration), and is not in use, it will be
          allocated to the service; otherwise creation of the service will fail.
          This field may not be changed through updates unless the type field is
          also being changed to ExternalName (which requires this field to be
          empty) or the type field is being changed from ExternalName (in which
          case this field may optionally be specified, as describe above).  Valid
          values are "None", empty string (""), or a valid IP address.  Setting
          this to "None" makes a "headless service" (no virtual IP), which is
          useful when direct endpoint connections are preferred and proxying is
          not required.  Only applies to types ClusterIP, NodePort, and
          LoadBalancer. If this field is specified when creating a Service of type
          ExternalName, creation will fail. This field will be wiped when updating
          a Service to type ExternalName.  If this field is not specified, it will
          be initialized from the clusterIP field.  If this field is specified,
          clients must ensure that clusterIPs[0] and clusterIP have the same
          value.

          This field may hold a maximum of two entries (dual-stack IPs, in either order).
          These IPs must correspond to the values of the ipFamilies field. Both
          clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
          +listType=atomic
          +optional
        items:
          type: string
        type: array
      externalIPs:
        description: |-
          externalIPs is a list of IP addresses for which nodes in the cluster
          will also accept traffic for this service.  These IPs are not managed by
          Kubernetes.  The user is responsible for ensuring that traffic arrives
          at a node with this IP.  A common example is external load-balancers
          that are not part of the Kubernetes system.
          +optional
        items:
          type: string
        type: array
      externalName:
        description: |-
          externalName is the external reference that discovery mechanisms will
          return as an alias for this service (e.g. a DNS CNAME record). No
          proxying will be involved.  Must be a lowercase RFC-1123 hostname
          (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
          +optional
        type: string
      externalTrafficPolicy:
        allOf:
        - $ref: '#/definitions/v1.ServiceExternalTrafficPolicy'
        description: |-
          externalTrafficPolicy describes how nodes distribute service traffic they
          receive on one of the Service's "externally-facing" addresses (NodePorts,
          ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
          the service in a way that assumes that external load balancers will take care
          of balancing the service traffic between nodes, and so each node will deliver
          traffic only to the node-local endpoints of the service, without masquerading
          the client source IP. (Traffic mistakenly sent to a node with no endpoints will
          be dropped.) The default value, "Cluster", uses the standard behavior of
          routing to all endpoints evenly (possibly modified by topology and other
          features). Note that traffic sent to an External IP or LoadBalancer IP from
          within the cluster will always get "Cluster" semantics, but clients sending to
          a NodePort from within the cluster may need to take traffic policy into account
          when picking a node.
          +optional
      healthCheckNodePort:
        description: |-
          healthCheckNodePort specifies the healthcheck nodePort for the service.
          This only applies when type is set to LoadBalancer and
          externalTrafficPolicy is set to Local. If a value is specified, is
          in-range, and is not in use, it will be used.  If not specified, a value
          will be automatically allocated.  External systems (e.g. load-balancers)
          can use this port to determine if a given node holds endpoints for this
          service or not.  If this field is specified when creating a Service
          which does not need it, creation will fail. This field will be wiped
          when updating a Service to no longer need it (e.g. changing type).
          This field cannot be updated once set.
          +optional
        type: integer
      internalTrafficPolicy:
        allOf:
        - $ref: '#/definitions/v1.ServiceInternalTrafficPolicy'
        description: |-
          InternalTrafficPolicy describes how nodes distribute service traffic they
          receive on the ClusterIP. If set to "Local", the proxy will assume that pods
          only want to talk to endpoints of the service on the same node as the pod,
          dropping the traffic if there are no local endpoints. The default value,
          "Cluster", uses the standard behavior of routing to all endpoints evenly
          (possibly modified by topology and other features).
          +optional
      ipFamilies:
        description: |-
          IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
          service. This field is usually assigned automatically based on cluster
          configuration and the ipFamilyPolicy field. If this field is specified
          manually, the requested family is available in the cluster,
          and ipFamilyPolicy allows it, it will be used; otherwise creation of
          the service will fail. This field is conditionally mutable: it allows
          for adding or removing a secondary IP family, but it does not allow
          changing the primary IP family of the Service. Valid values are "IPv4"
          and "IPv6".  This field only applies to Services of types ClusterIP,
          NodePort, and LoadBalancer, and does apply to "headless" services.
          This field will be wiped when updating a Service to type ExternalName.

          This field may hold a maximum of two entries (dual-stack families, in
          either order).  These families must correspond to the values of the
          clusterIPs field, if specified. Both clusterIPs and ipFamilies are
          governed by the ipFamilyPolicy field.
          +listType=atomic
          +optional
        items:
          $ref: '#/definitions/v1.IPFamily'
        type: array
      ipFamilyPolicy:
        allOf:
        - $ref: '#/definitions/v1.IPFamilyPolicy'
        description: |-
          IPFamilyPolicy represents the dual-stack-ness requested or required by
          this Service. If there is no value provided, then this field will be set
          to SingleStack. Services can be "SingleStack" (a single IP family),
          "PreferDualStack" (two IP families on dual-stack configured clusters or
          a single IP family on single-stack clusters), or "RequireDualStack"
          (two IP families on dual-stack configured clusters, otherwise fail). The
          ipFamilies and clusterIPs fields depend on the value of this field. This
          field will be wiped when updating a service to type ExternalName.
          +optional
      loadBalancerClass:
        description: |-
          loadBalancerClass is the class of the load balancer implementation this Service belongs to.
          If specified, the value of this field must be a label-style identifier, with an optional prefix,
          e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
          This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
          balancer implementation is used, today this is typically done through the cloud provider integration,
          but should apply for any default implementation. If set, it is assumed that a load balancer
          implementation is watching for Services with a matching class. Any default load balancer
          implementation (e.g. cloud providers) should ignore Services that set this field.
          This field can only be set when creating or updating a Service to type 'LoadBalancer'.
          Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
          +optional
        type: string
      loadBalancerIP:
        description: |-
          Only applies to Service Type: LoadBalancer.
          This feature depends on whether the underlying cloud-provider supports specifying
          the loadBalancerIP when a load balancer is created.
          This field will be ignored if the cloud-provider does not support the feature.
          Deprecated: This field was under-specified and its meaning varies across implementations.
          Using it is non-portable and it may not support dual-stack.
          Users are encouraged to use implementation-specific annotations when available.
          +optional
        type: string
      loadBalancerSourceRanges:
        description: |-
          If specified and supported by the platform, this will restrict traffic through the cloud-provider
          load-balancer will be restricted to the specified client IPs. This field will be ignored if the
          cloud-provider does not support the feature."
          More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
          +optional
        items:
          type: string
        type: array
      ports:
        description: |-
          The list of ports that are exposed by this service.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
          +patchMergeKey=port
          +patchStrategy=merge
          +listType=map
          +listMapKey=port
          +listMapKey=protocol
        items:
          $ref: '#/definitions/v1.ServicePort'
        type: array
      publishNotReadyAddresses:
        description: |-
          publishNotReadyAddresses indicates that any agent which deals with endpoints for this
          Service should disregard any indications of ready/not-ready.
          The primary use case for setting this field is for a StatefulSet's Headless Service to
          propagate SRV DNS records for its Pods for the purpose of peer discovery.
          The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
          Services interpret this to mean that all endpoints are considered "ready" even if the
          Pods themselves are not. Agents which consume only Kubernetes generated endpoints
          through the Endpoints or EndpointSlice resources can safely assume this behavior.
          +optional
        type: boolean
      selector:
        additionalProperties:
          type: string
        description: |-
          Route service traffic to pods with label keys and values matching this
          selector. If empty or not present, the service is assumed to have an
          external process managing its endpoints, which Kubernetes will not
          modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
          Ignored if type is ExternalName.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/
          +optional
          +mapType=atomic
        type: object
      sessionAffinity:
        allOf:
        - $ref: '#/definitions/v1.ServiceAffinity'
        description: |-
          Supports "ClientIP" and "None". Used to maintain session affinity.
          Enable client IP based session affinity.
          Must be ClientIP or None.
          Defaults to None.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
          +optional
      sessionAffinityConfig:
        allOf:
        - $ref: '#/definitions/v1.SessionAffinityConfig'
        description: |-
          sessionAffinityConfig contains the configurations of session affinity.
          +optional
      type:
        allOf:
        - $ref: '#/definitions/v1.ServiceType'
        description: |-
          type determines how the Service is exposed. Defaults to ClusterIP. Valid
          options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
          "ClusterIP" allocates a cluster-internal IP address for load-balancing
          to endpoints. Endpoints are determined by the selector or if that is not
          specified, by manual construction of an Endpoints object or
          EndpointSlice objects. If clusterIP is "None", no virtual IP is
          allocated and the endpoints are published as a set of endpoints rather
          than a virtual IP.
          "NodePort" builds on ClusterIP and allocates a port on every node which
          routes to the same endpoints as the clusterIP.
          "LoadBalancer" builds on NodePort and creates an external load-balancer
          (if supported in the current cloud) which routes to the same endpoints
          as the clusterIP.
          "ExternalName" aliases this service to the specified externalName.
          Several other fields do not apply to ExternalName services.
          More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
          +optional
    type: object
  v1.ServiceStatus:
    properties:
      conditions:
        description: |-
          Current service state
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
          +listType=map
          +listMapKey=type
        items:
          $ref: '#/definitions/v1.Condition'
        type: array
      loadBalancer:
        allOf:
        - $ref: '#/definitions/v1.LoadBalancerStatus'
        description: |-
          LoadBalancer contains the current status of the load-balancer,
          if one is present.
          +optional
    type: object
  v1.ServiceType:
    enum:
    - ClusterIP
    - NodePort
    - LoadBalancer
    - ExternalName
    type: string
    x-enum-varnames:
    - ServiceTypeClusterIP
    - ServiceTypeNodePort
    - ServiceTypeLoadBalancer
    - ServiceTypeExternalName
  v1.SessionAffinityConfig:
    properties:
      clientIP:
        allOf:
        - $ref: '#/definitions/v1.ClientIPConfig'
        description: |-
          clientIP contains the configurations of Client IP based session affinity.
          +optional
    type: object
  v1.StorageMedium:
    enum:
    - ""
    - Memory
    - HugePages
    - HugePages-
    type: string
    x-enum-comments:
      StorageMediumDefault: use whatever the default is for the node, assume anything
        we don't explicitly handle is this
      StorageMediumHugePages: use hugepages
      StorageMediumHugePagesPrefix: prefix for full medium notation HugePages-<size>
      StorageMediumMemory: use memory (e.g. tmpfs on linux)
    x-enum-varnames:
    - StorageMediumDefault
    - StorageMediumMemory
    - StorageMediumHugePages
    - StorageMediumHugePagesPrefix
  v1.StorageOSVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is the filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      readOnly:
        description: |-
          readOnly defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        allOf:
        - $ref: '#/definitions/k8s_io_api_core_v1.LocalObjectReference'
        description: |-
          secretRef specifies the secret to use for obtaining the StorageOS API
          credentials.  If not specified, default values will be attempted.
          +optional
      volumeName:
        description: |-
          volumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
        type: string
      volumeNamespace:
        description: |-
          volumeNamespace specifies the scope of the volume within StorageOS.  If no
          namespace is specified then the Pod's namespace will be used.  This allows the
          Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set VolumeName to any name to override the default behaviour.
          Set to "default" if you are not using namespaces within StorageOS.
          Namespaces that do not pre-exist within StorageOS will be created.
          +optional
        type: string
    type: object
  v1.Sysctl:
    properties:
      name:
        description: Name of a property to set
        type: string
      value:
        description: Value of a property to set
        type: string
    type: object
  v1.TCPSocketAction:
    properties:
      host:
        description: |-
          Optional: Host name to connect to, defaults to the pod IP.
          +optional
        type: string
      port:
        allOf:
        - $ref: '#/definitions/intstr.IntOrString'
        description: |-
          Number or name of the port to access on the container.
          Number must be in the range 1 to 65535.
          Name must be an IANA_SVC_NAME.
    type: object
  v1.TaintEffect:
    enum:
    - NoSchedule
    - PreferNoSchedule
    - NoExecute
    type: string
    x-enum-varnames:
    - TaintEffectNoSchedule
    - TaintEffectPreferNoSchedule
    - TaintEffectNoExecute
  v1.TerminationMessagePolicy:
    enum:
    - File
    - FallbackToLogsOnError
    type: string
    x-enum-varnames:
    - TerminationMessageReadFile
    - TerminationMessageFallbackToLogsOnError
  v1.Toleration:
    properties:
      effect:
        allOf:
        - $ref: '#/definitions/v1.TaintEffect'
        description: |-
          Effect indicates the taint effect to match. Empty means match all taint effects.
          When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
          +optional
      key:
        description: |-
          Key is the taint key that the toleration applies to. Empty means match all taint keys.
          If the key is empty, operator must be Exists; this combination means to match all values and all keys.
          +optional
        type: string
      operator:
        allOf:
        - $ref: '#/definitions/v1.TolerationOperator'
        description: |-
          Operator represents a key's relationship to the value.
          Valid operators are Exists and Equal. Defaults to Equal.
          Exists is equivalent to wildcard for value, so that a pod can
          tolerate all taints of a particular category.
          +optional
      tolerationSeconds:
        description: |-
          TolerationSeconds represents the period of time the toleration (which must be
          of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
          it is not set, which means tolerate the taint forever (do not evict). Zero and
          negative values will be treated as 0 (evict immediately) by the system.
          +optional
        type: integer
      value:
        description: |-
          Value is the taint value the toleration matches to.
          If the operator is Exists, the value should be empty, otherwise just a regular string.
          +optional
        type: string
    type: object
  v1.TolerationOperator:
    enum:
    - Exists
    - Equal
    type: string
    x-enum-varnames:
    - TolerationOpExists
    - TolerationOpEqual
  v1.TopologySpreadConstraint:
    properties:
      labelSelector:
        allOf:
        - $ref: '#/definitions/v1.LabelSelector'
        description: |-
          LabelSelector is used to find matching pods.
          Pods that match this label selector are counted to determine the number of pods
          in their corresponding topology domain.
          +optional
      matchLabelKeys:
        description: |-
          MatchLabelKeys is a set of pod label keys to select the pods over which
          spreading will be calculated. The keys are used to lookup values from the
          incoming pod labels, those key-value labels are ANDed with labelSelector
          to select the group of existing pods over which spreading will be calculated
          for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
          MatchLabelKeys cannot be set when LabelSelector isn't set.
          Keys that don't exist in the incoming pod labels will
          be ignored. A null or empty list means only match against labelSelector.

          This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
          +listType=atomic
          +optional
        items:
          type: string
        type: array
      maxSkew:
        description: |-
          MaxSkew describes the degree to which pods may be unevenly distributed.
          When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
          between the number of matching pods in the target topology and the global minimum.
          The global minimum is the minimum number of matching pods in an eligible domain
          or zero if the number of eligible domains is less than MinDomains.
          For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
          labelSelector spread as 2/2/1:
          In this case, the global minimum is 1.
          +-------+-------+-------+
          | zone1 | zone2 | zone3 |
          +-------+-------+-------+
          |  P P  |  P P  |   P   |
          +-------+-------+-------+
          - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
          scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
          violate MaxSkew(1).
          - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
          When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
          to topologies that satisfy it.
          It's a required field. Default value is 1 and 0 is not allowed.
        type: integer
      minDomains:
        description: |-
          MinDomains indicates a minimum number of eligible domains.
          When the number of eligible domains with matching topology keys is less than minDomains,
          Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
          And when the number of eligible domains with matching topology keys equals or greater than minDomains,
          this value has no effect on scheduling.
          As a result, when the number of eligible domains is less than minDomains,
          scheduler won't schedule more than maxSkew Pods to those domains.
          If value is nil, the constraint behaves as if MinDomains is equal to 1.
          Valid values are integers greater than 0.
          When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

          For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
          labelSelector spread as 2/2/2:
          +-------+-------+-------+
          | zone1 | zone2 | zone3 |
          +-------+-------+-------+
          |  P P  |  P P  |  P P  |
          +-------+-------+-------+
          The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
          In this situation, new pod with the same labelSelector cannot be scheduled,
          because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
          it will violate MaxSkew.

          This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
          +optional
        type: integer
      nodeAffinityPolicy:
        allOf:
        - $ref: '#/definitions/v1.NodeInclusionPolicy'
        description: |-
          NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
          when calculating pod topology spread skew. Options are:
          - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
          - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

          If this value is nil, the behavior is equivalent to the Honor policy.
          This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
          +optional
      nodeTaintsPolicy:
        allOf:
        - $ref: '#/definitions/v1.NodeInclusionPolicy'
        description: |-
          NodeTaintsPolicy indicates how we will treat node taints when calculating
          pod topology spread skew. Options are:
          - Honor: nodes without taints, along with tainted nodes for which the incoming pod
          has a toleration, are included.
          - Ignore: node taints are ignored. All nodes are included.

          If this value is nil, the behavior is equivalent to the Ignore policy.
          This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
          +optional
      topologyKey:
        description: |-
          TopologyKey is the key of node labels. Nodes that have a label with this key
          and identical values are considered to be in the same topology.
          We consider each <key, value> as a "bucket", and try to put balanced number
          of pods into each bucket.
          We define a domain as a particular instance of a topology.
          Also, we define an eligible domain as a domain whose nodes meet the requirements of
          nodeAffinityPolicy and nodeTaintsPolicy.
          e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
          And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
          It's a required field.
        type: string
      whenUnsatisfiable:
        allOf:
        - $ref: '#/definitions/v1.UnsatisfiableConstraintAction'
        description: |-
          WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
          the spread constraint.
          - DoNotSchedule (default) tells the scheduler not to schedule it.
          - ScheduleAnyway tells the scheduler to schedule the pod in any location,
            but giving higher precedence to topologies that would help reduce the
            skew.
          A constraint is considered "Unsatisfiable" for an incoming pod
          if and only if every possible node assignment for that pod would violate
          "MaxSkew" on some topology.
          For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
          labelSelector spread as 3/1/1:
          +-------+-------+-------+
          | zone1 | zone2 | zone3 |
          +-------+-------+-------+
          | P P P |   P   |   P   |
          +-------+-------+-------+
          If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
          to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
          MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
          won't make it *more* imbalanced.
          It's a required field.
    type: object
  v1.TypedLocalObjectReference:
    properties:
      apiGroup:
        description: |-
          APIGroup is the group for the resource being referenced.
          If APIGroup is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
          +optional
        type: string
      kind:
        description: Kind is the type of resource being referenced
        type: string
      name:
        description: Name is the name of resource being referenced
        type: string
    type: object
  v1.TypedObjectReference:
    properties:
      apiGroup:
        description: |-
          APIGroup is the group for the resource being referenced.
          If APIGroup is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
          +optional
        type: string
      kind:
        description: Kind is the type of resource being referenced
        type: string
      name:
        description: Name is the name of resource being referenced
        type: string
      namespace:
        description: |-
          Namespace is the namespace of resource being referenced
          Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
          (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
          +featureGate=CrossNamespaceVolumeDataSource
          +optional
        type: string
    type: object
  v1.URIScheme:
    enum:
    - HTTP
    - HTTPS
    type: string
    x-enum-varnames:
    - URISchemeHTTP
    - URISchemeHTTPS
  v1.UnsatisfiableConstraintAction:
    enum:
    - DoNotSchedule
    - ScheduleAnyway
    type: string
    x-enum-varnames:
    - DoNotSchedule
    - ScheduleAnyway
  v1.Volume:
    properties:
      awsElasticBlockStore:
        allOf:
        - $ref: '#/definitions/v1.AWSElasticBlockStoreVolumeSource'
        description: |-
          awsElasticBlockStore represents an AWS Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
      azureDisk:
        allOf:
        - $ref: '#/definitions/v1.AzureDiskVolumeSource'
        description: |-
          azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
          +optional
      azureFile:
        allOf:
        - $ref: '#/definitions/v1.AzureFileVolumeSource'
        description: |-
          azureFile represents an Azure File Service mount on the host and bind mount to the pod.
          +optional
      cephfs:
        allOf:
        - $ref: '#/definitions/v1.CephFSVolumeSource'
        description: |-
          cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
          +optional
      cinder:
        allOf:
        - $ref: '#/definitions/v1.CinderVolumeSource'
        description: |-
          cinder represents a cinder volume attached and mounted on kubelets host machine.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
      configMap:
        allOf:
        - $ref: '#/definitions/v1.ConfigMapVolumeSource'
        description: |-
          configMap represents a configMap that should populate this volume
          +optional
      csi:
        allOf:
        - $ref: '#/definitions/v1.CSIVolumeSource'
        description: |-
          csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
          +optional
      downwardAPI:
        allOf:
        - $ref: '#/definitions/v1.DownwardAPIVolumeSource'
        description: |-
          downwardAPI represents downward API about the pod that should populate this volume
          +optional
      emptyDir:
        allOf:
        - $ref: '#/definitions/v1.EmptyDirVolumeSource'
        description: |-
          emptyDir represents a temporary directory that shares a pod's lifetime.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          +optional
      ephemeral:
        allOf:
        - $ref: '#/definitions/v1.EphemeralVolumeSource'
        description: |-
          ephemeral represents a volume that is handled by a cluster storage driver.
          The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
          and deleted when the pod is removed.

          Use this if:
          a) the volume is only needed while the pod runs,
          b) features of normal volumes like restoring from snapshot or capacity
             tracking are needed,
          c) the storage driver is specified through a storage class, and
          d) the storage driver supports dynamic volume provisioning through
             a PersistentVolumeClaim (see EphemeralVolumeSource for more
             information on the connection between this volume type
             and PersistentVolumeClaim).

          Use PersistentVolumeClaim or one of the vendor-specific
          APIs for volumes that persist for longer than the lifecycle
          of an individual pod.

          Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
          be used that way - see the documentation of the driver for
          more information.

          A pod can use both types of ephemeral volumes and
          persistent volumes at the same time.

          +optional
      fc:
        allOf:
        - $ref: '#/definitions/v1.FCVolumeSource'
        description: |-
          fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
          +optional
      flexVolume:
        allOf:
        - $ref: '#/definitions/v1.FlexVolumeSource'
        description: |-
          flexVolume represents a generic volume resource that is
          provisioned/attached using an exec based plugin.
          +optional
      flocker:
        allOf:
        - $ref: '#/definitions/v1.FlockerVolumeSource'
        description: |-
          flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
          +optional
      gcePersistentDisk:
        allOf:
        - $ref: '#/definitions/v1.GCEPersistentDiskVolumeSource'
        description: |-
          gcePersistentDisk represents a GCE Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
      gitRepo:
        allOf:
        - $ref: '#/definitions/v1.GitRepoVolumeSource'
        description: |-
          gitRepo represents a git repository at a particular revision.
          DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
          EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
          into the Pod's container.
          +optional
      glusterfs:
        allOf:
        - $ref: '#/definitions/v1.GlusterfsVolumeSource'
        description: |-
          glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md
          +optional
      hostPath:
        allOf:
        - $ref: '#/definitions/v1.HostPathVolumeSource'
        description: |-
          hostPath represents a pre-existing file or directory on the host
          machine that is directly exposed to the container. This is generally
          used for system agents or other privileged things that are allowed
          to see the host machine. Most containers will NOT need this.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
          ---
          TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
          mount host directories as read/write.
          +optional
      iscsi:
        allOf:
        - $ref: '#/definitions/v1.ISCSIVolumeSource'
        description: |-
          iscsi represents an ISCSI Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod.
          More info: https://examples.k8s.io/volumes/iscsi/README.md
          +optional
      name:
        description: |-
          name of the volume.
          Must be a DNS_LABEL and unique within the pod.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      nfs:
        allOf:
        - $ref: '#/definitions/v1.NFSVolumeSource'
        description: |-
          nfs represents an NFS mount on the host that shares a pod's lifetime
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
      persistentVolumeClaim:
        allOf:
        - $ref: '#/definitions/v1.PersistentVolumeClaimVolumeSource'
        description: |-
          persistentVolumeClaimVolumeSource represents a reference to a
          PersistentVolumeClaim in the same namespace.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
          +optional
      photonPersistentDisk:
        allOf:
        - $ref: '#/definitions/v1.PhotonPersistentDiskVolumeSource'
        description: photonPersistentDisk represents a PhotonController persistent
          disk attached and mounted on kubelets host machine
      portworxVolume:
        allOf:
        - $ref: '#/definitions/v1.PortworxVolumeSource'
        description: |-
          portworxVolume represents a portworx volume attached and mounted on kubelets host machine
          +optional
      projected:
        allOf:
        - $ref: '#/definitions/v1.ProjectedVolumeSource'
        description: projected items for all in one resources secrets, configmaps,
          and downward API
      quobyte:
        allOf:
        - $ref: '#/definitions/v1.QuobyteVolumeSource'
        description: |-
          quobyte represents a Quobyte mount on the host that shares a pod's lifetime
          +optional
      rbd:
        allOf:
        - $ref: '#/definitions/v1.RBDVolumeSource'
        description: |-
          rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
          More info: https://examples.k8s.io/volumes/rbd/README.md
          +optional
      scaleIO:
        allOf:
        - $ref: '#/definitions/v1.ScaleIOVolumeSource'
        description: |-
          scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
          +optional
      secret:
        allOf:
        - $ref: '#/definitions/v1.SecretVolumeSource'
        description: |-
          secret represents a secret that should populate this volume.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
      storageos:
        allOf:
        - $ref: '#/definitions/v1.StorageOSVolumeSource'
        description: |-
          storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
          +optional
      vsphereVolume:
        allOf:
        - $ref: '#/definitions/v1.VsphereVirtualDiskVolumeSource'
        description: |-
          vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
          +optional
    type: object
  v1.VolumeDevice:
    properties:
      devicePath:
        description: devicePath is the path inside of the container that the device
          will be mapped to.
        type: string
      name:
        description: name must match the name of a persistentVolumeClaim in the pod
        type: string
    type: object
  v1.VolumeMount:
    properties:
      mountPath:
        description: |-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
        type: string
      mountPropagation:
        allOf:
        - $ref: '#/definitions/v1.MountPropagationMode'
        description: |-
          mountPropagation determines how mounts are propagated from the host
          to container and the other way around.
          When not set, MountPropagationNone is used.
          This field is beta in 1.10.
          +optional
      name:
        description: This must match the Name of a Volume.
        type: string
      readOnly:
        description: |-
          Mounted read-only if true, read-write otherwise (false or unspecified).
          Defaults to false.
          +optional
        type: boolean
      subPath:
        description: |-
          Path within the volume from which the container's volume should be mounted.
          Defaults to "" (volume's root).
          +optional
        type: string
      subPathExpr:
        description: |-
          Expanded path within the volume from which the container's volume should be mounted.
          Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
          Defaults to "" (volume's root).
          SubPathExpr and SubPath are mutually exclusive.
          +optional
        type: string
    type: object
  v1.VolumeProjection:
    properties:
      configMap:
        allOf:
        - $ref: '#/definitions/v1.ConfigMapProjection'
        description: |-
          configMap information about the configMap data to project
          +optional
      downwardAPI:
        allOf:
        - $ref: '#/definitions/v1.DownwardAPIProjection'
        description: |-
          downwardAPI information about the downwardAPI data to project
          +optional
      secret:
        allOf:
        - $ref: '#/definitions/v1.SecretProjection'
        description: |-
          secret information about the secret data to project
          +optional
      serviceAccountToken:
        allOf:
        - $ref: '#/definitions/v1.ServiceAccountTokenProjection'
        description: |-
          serviceAccountToken is information about the serviceAccountToken data to project
          +optional
    type: object
  v1.VsphereVirtualDiskVolumeSource:
    properties:
      fsType:
        description: |-
          fsType is filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      storagePolicyID:
        description: |-
          storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
          +optional
        type: string
      storagePolicyName:
        description: |-
          storagePolicyName is the storage Policy Based Management (SPBM) profile name.
          +optional
        type: string
      volumePath:
        description: volumePath is the path that identifies vSphere volume vmdk
        type: string
    type: object
  v1.WeightedPodAffinityTerm:
    properties:
      podAffinityTerm:
        allOf:
        - $ref: '#/definitions/v1.PodAffinityTerm'
        description: Required. A pod affinity term, associated with the corresponding
          weight.
      weight:
        description: |-
          weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
        type: integer
    type: object
  v1.WindowsSecurityContextOptions:
    properties:
      gmsaCredentialSpec:
        description: |-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
          GMSA credential spec named by the GMSACredentialSpecName field.
          +optional
        type: string
      gmsaCredentialSpecName:
        description: |-
          GMSACredentialSpecName is the name of the GMSA credential spec to use.
          +optional
        type: string
      hostProcess:
        description: |-
          HostProcess determines if a container should be run as a 'Host Process' container.
          All of a Pod's containers must have the same effective HostProcess value
          (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
          In addition, if HostProcess is true then HostNetwork must also be set to true.
          +optional
        type: boolean
      runAsUserName:
        description: |-
          The UserName in Windows to run the entrypoint of the container process.
          Defaults to the user specified in image metadata if unspecified.
          May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/authenticate:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PunqToken'
      security:
      - Bearer: []
      tags:
      - Auth
  /auth/login:
    post:
      parameters:
      - description: LoginInput
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/operator.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PunqToken'
      tags:
      - Auth
  /context/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.PunqContext'
            type: array
      tags:
      - Context
  /user:
    patch:
      parameters:
      - description: PunqUserUpdateInput
        in: body
        name: body
        schema:
          $ref: '#/definitions/dtos.PunqUserUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PunqUser'
      security:
      - Bearer: []
      tags:
      - User
    post:
      parameters:
      - description: PunqUserCreateInput
        in: body
        name: body
        schema:
          $ref: '#/definitions/dtos.PunqUserCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PunqUser'
      security:
      - Bearer: []
      tags:
      - User
  /user/{id}:
    delete:
      parameters:
      - description: ID of the user
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PunqUser'
      security:
      - Bearer: []
      tags:
      - User
    get:
      parameters:
      - description: ID of the user
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.PunqUser'
      security:
      - Bearer: []
      tags:
      - User
  /user/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.PunqUser'
            type: array
      security:
      - Bearer: []
      tags:
      - User
  /version:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Version'
      tags:
      - Misc
  /workload/available-resources:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      security:
      - Bearer: []
      tags:
      - General
  /workload/configmap:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ConfigMap'
      security:
      - Bearer: []
      tags:
      - Workloads
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.ConfigMap'
            type: array
      security:
      - Bearer: []
      tags:
      - Workloads
    patch:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ConfigMap'
      security:
      - Bearer: []
      tags:
      - Workloads
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ConfigMap'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/configmap/describe:
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      - description: resource name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/daemonset:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.DaemonSet'
      security:
      - Bearer: []
      tags:
      - Workloads
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.DaemonSet'
            type: array
      security:
      - Bearer: []
      tags:
      - Workloads
    patch:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.DaemonSet'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/daemonset/describe:
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.DaemonSet'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/deployment:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Deployment'
      security:
      - Bearer: []
      tags:
      - Workloads
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Deployment'
            type: array
      security:
      - Bearer: []
      tags:
      - Workloads
    patch:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Deployment'
      security:
      - Bearer: []
      tags:
      - Workloads
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Deployment'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/deployment/describe:
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      - description: resource name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/ingress:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Ingress'
      security:
      - Bearer: []
      tags:
      - Workloads
    patch:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Ingress'
      security:
      - Bearer: []
      tags:
      - Workloads
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Ingress'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/ingress/describe:
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      - description: resource name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/namespace:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/namespace/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Namespace'
            type: array
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/node/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/utils.K8sWorkloadResult'
            type: array
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/node/describe:
    get:
      parameters:
      - description: resource name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/pod:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Pod'
      security:
      - Bearer: []
      tags:
      - Workloads
    patch:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/pod/describe:
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      - description: resource name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/secret:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Secret'
      security:
      - Bearer: []
      tags:
      - Workloads
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Secret'
            type: array
      security:
      - Bearer: []
      tags:
      - Workloads
    patch:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Secret'
      security:
      - Bearer: []
      tags:
      - Workloads
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Secret'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/secret/describe:
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      - description: resource name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/service:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Service'
      security:
      - Bearer: []
      tags:
      - Workloads
    patch:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Service'
      security:
      - Bearer: []
      tags:
      - Workloads
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Service'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/service/describe:
    get:
      parameters:
      - description: namespace
        in: query
        name: namespace
        type: string
      - description: resource name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.K8sWorkloadResult'
      security:
      - Bearer: []
      tags:
      - Workloads
  /workload/templates:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/kubernetes.K8sNewWorkload'
            type: array
      security:
      - Bearer: []
      tags:
      - General
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token. Use the user/login
      route to get the token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
